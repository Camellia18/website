
<!-- saved from url=(0036)http://10.26.40.46/tealeaman/Listing -->
<html lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8"><style type="text/css">td{font-family:courier;font-size:18px}
p{line-height:23.0px;}</style></head><body style="background-color:#ffffee;margin:5px 5px 0px 5px"><table align="left"><tbody><tr><td align="right" style="color:teal" valign="top"><p>1<br>
2<br>
3<br>
4<br>
5<br>
6<br>
7<br>
8<br>
9<br>
10<br>
11<br>
12<br>
13<br>
14<br>
15<br>
16<br>
</p></td><td align="left" valign="top"><p><nobr><b>import</b> java.util.*;</nobr><br>
<nobr><b>public</b> <b>class</b> Calc</nobr><br>
<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>public</b> <b>static</b> <b>void</b> main(String [] args)</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>int</b> n1, n2, sum, product;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>Scanner scanner = <b>new</b> Scanner(System.in);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>System.out.println(<font color="red">"Enter&nbsp;an&nbsp;integer:"</font>);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>n1 = scanner.nextInt();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>System.out.println(<font color="red">"Enter&nbsp;another&nbsp;integer:"</font>);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>n2 = scanner.nextInt();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>sum = n1 + n2;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>product = n1 * n2;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>System.out.println(<font color="red">"The&nbsp;sum&nbsp;is&nbsp;"</font>+ sum+ <font color="red">",&nbsp;and&nbsp;the&nbsp;product&nbsp;is&nbsp;"</font>+ product);</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
<nobr>}</nobr><br>
</p></td></tr></tbody></table>
<script> if(window==parent)window.moveTo(screen.width/2 - 300,3);window.resizeTo(602,screen.height-30);</script>
<table align=left><tr><td  align=right style=color:teal valign=top><p>1<br>
2<br>
3<br>
4<br>
5<br>
6<br>
7<br>
8<br>
9<br>
10<br>
11<br>
12<br>
13<br>
14<br>
15<br>
</p></td><td  align=left valign=top><p><nobr><b>import</b> java.util.*;</nobr><br>
<nobr><b>public</b> <b>class</b> RectangleArea</nobr><br>
<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>public</b> <b>static</b> <b>void</b> main(String [] args)</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>double</b> length, breadth, area;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>Scanner scanner = <b>new</b> Scanner(System.in);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>System.out.println(<font color=red>"Enter&nbsp;length&nbsp;of&nbsp;the&nbsp;rectangle:"</font>);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>length = scanner.nextDouble();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>System.out.println(<font color=red>"Enter&nbsp;breadth&nbsp;of&nbsp;the&nbsp;rectangle:"</font>);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>breadth = scanner.nextDouble();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>area = length * breadth;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>System.out.println(<font color=red>"The&nbsp;area&nbsp;of&nbsp;the&nbsp;rectangle&nbsp;is&nbsp;"</font>+ area);</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
<nobr>}</nobr><br>
</p></td></tr></table>
<table align=left><tr><td  align=right style=color:teal valign=top><p>1<br>
2<br>
3<br>
4<br>
5<br>
6<br>
7<br>
8<br>
9<br>
10<br>
11<br>
12<br>
13<br>
14<br>
15<br>
16<br>
17<br>
18<br>
</p></td><td  align=left valign=top><p><nobr><b>import</b> java.util.*;</nobr><br>
<nobr><b>public</b> <b>class</b> StudentInfo</nobr><br>
<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>public</b> <b>static</b> <b>void</b> main(String [] args)</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>String name, result;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>int</b> age;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>double</b> gpa;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>Scanner scanner = <b>new</b> Scanner(System.in);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>System.out.println(<font color=red>"Please&nbsp;enter&nbsp;student&nbsp;information&nbsp;(Name&nbsp;age&nbsp;GPA)&nbsp;in&nbsp;one&nbsp;line&nbsp;like&nbsp;this:&nbsp;John&nbsp;Smith&nbsp;20&nbsp;3.4:"</font>);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>name = scanner.next();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>name = name + <font color=red>"&nbsp;"</font>+ scanner.next();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>age = scanner.nextInt();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>gpa = scanner.nextDouble();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>result = <font color=red>"Student&nbsp;named&nbsp;"</font>+ name + <font color=red>"&nbsp;is&nbsp;"</font>+ age +<font color=red>"&nbsp;years&nbsp;old&nbsp;and&nbsp;has&nbsp;"</font>+ gpa + <font color=red>"&nbsp;GPA"</font>;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>System.out.println(result);</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
<nobr>}</nobr><br>
</p></td></tr></table>
<table align=left><tr><td  align=right style=color:teal valign=top><p>1<br>
2<br>
3<br>
4<br>
5<br>
6<br>
7<br>
8<br>
9<br>
10<br>
11<br>
12<br>
13<br>
14<br>
15<br>
16<br>
17<br>
18<br>
19<br>
20<br>
21<br>
22<br>
23<br>
24<br>
25<br>
26<br>
27<br>
28<br>
29<br>
30<br>
31<br>
32<br>
33<br>
34<br>
35<br>
36<br>
37<br>
38<br>
39<br>
</p></td><td  align=left valign=top><p><nobr><b>public</b> <b>class</b> Remove38</nobr><br>
<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>public</b> <b>static</b> String remove38(String x)</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>String part1 = <font color=red>""</font>, part2 = <font color=red>""</font>, part3 = <font color=red>""</font>;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>if</b> (x.length() &gt; 8)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>part1 = x.substring(0,2);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>part2 = x.substring(3,7);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>part3 = x.substring(8);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>else</b> <b>if</b> (x.length() == 8)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>part1 = x.substring(0,2);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>part2 = x.substring(3,7);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>else</b> <b>if</b> (x.length() &gt; 3)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>part1 = x.substring(0,2);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>part2 = x.substring(3);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>else</b> <b>if</b> (x.length() == 3)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>part1 = x.substring(0,2);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>else</b></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>part1 = x;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>return</b> part1 + part2 + part3;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>public</b> <b>static</b> <b>void</b> main(String [] args)</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>System.out.println(remove38(<font color=red>"ab"</font>));</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>System.out.println(remove38(<font color=red>"abc"</font>));</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>System.out.println(remove38(<font color=red>"abcdefgh"</font>));</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>System.out.println(remove38(<font color=red>"abcdefghi"</font>));</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
<nobr>}</nobr><br>
</p></td></tr></table>
<table align=left><tr><td  align=right style=color:teal valign=top><p>1<br>
2<br>
3<br>
4<br>
5<br>
6<br>
7<br>
8<br>
9<br>
10<br>
11<br>
12<br>
13<br>
14<br>
15<br>
16<br>
17<br>
18<br>
19<br>
20<br>
21<br>
22<br>
23<br>
24<br>
25<br>
26<br>
27<br>
28<br>
29<br>
30<br>
31<br>
32<br>
33<br>
34<br>
35<br>
36<br>
37<br>
38<br>
39<br>
40<br>
41<br>
42<br>
43<br>
44<br>
45<br>
46<br>
47<br>
48<br>
49<br>
50<br>
51<br>
52<br>
53<br>
54<br>
55<br>
56<br>
57<br>
58<br>
59<br>
60<br>
61<br>
62<br>
</p></td><td  align=left valign=top><p><nobr><b>public</b> <b>class</b> FivePointerStar</nobr><br>
<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>public</b> <b>static</b> <b>void</b> main(String[] args)</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>vertices();</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>public</b> <b>static</b> <b>void</b> vertices()</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>double</b> radius = 1.0;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>double</b> angleStep = 2 * Math.PI / 5;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>double[][] outerVertices = <b>new</b> double[5][2];</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>for</b> (int i = 0; i &lt; 5; i++)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>double</b> angle = i * angleStep;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>double</b> x = radius * Math.cos(angle);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>double</b> y = radius * Math.sin(angle);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>outerVertices[i][0] = x;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>outerVertices[i][1] = y;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>System.out.printf(<font color=red>"%d:&nbsp;(%.3f,&nbsp;%.3f)\n"</font>, i + 1, x, y);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>double[][] innerVertices = <b>new</b> double[5][2];</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>for</b> (int i = 0; i &lt; 5; i++)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>int</b> next = (i + 2) % 5;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>double[] intersection = lineIntersection(</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>outerVertices[i][0], outerVertices[i][1],</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>outerVertices[next][0], outerVertices[next][1],</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>outerVertices[(i + 1) % 5][0], outerVertices[(i + 1) % 5][1],</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>outerVertices[(next + 1) % 5][0], outerVertices[(next + 1) % 5][1]</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>innerVertices[i][0] = intersection[0];</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>innerVertices[i][1] = intersection[1];</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>System.out.printf(<font color=red>"%d:&nbsp;(%.3f,&nbsp;%.3f)\n"</font>, i + 6, intersection[0], intersection[1]);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>private</b> <b>static</b> double[] lineIntersection(double x1, <b>double</b> y1, <b>double</b> x2, <b>double</b> y2, <b>double</b> x3, <b>double</b> y3, <b>double</b> x4, <b>double</b> y4)</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>double</b> d = (x1 - x2) * (y3 - y4) - (y1 - y2) * (x3 - x4);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>if</b> (d == 0)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>throw</b> <b>new</b> IllegalArgumentException(<font color=red>"Lines&nbsp;do&nbsp;not&nbsp;intersect"</font>);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>double</b> t = ((x1 - x3) * (y3 - y4) - (y1 - y3) * (x3 - x4)) / d;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>double</b> u = -((x1 - x2) * (y1 - y3) - (y1 - y2) * (x1 - x3)) / d;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>double</b> ix = x1 + t * (x2 - x1);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>double</b> iy = y1 + t * (y2 - y1);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>return</b> <b>new</b> double[]</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>ix, iy</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>};</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
<nobr>}</nobr><br>
</p></td></tr></table>
<table align=left><tr><td  align=right style=color:teal valign=top><p>1<br>
2<br>
3<br>
4<br>
5<br>
6<br>
7<br>
8<br>
9<br>
10<br>
11<br>
12<br>
13<br>
14<br>
15<br>
16<br>
17<br>
18<br>
19<br>
20<br>
21<br>
22<br>
23<br>
24<br>
25<br>
26<br>
27<br>
28<br>
29<br>
30<br>
31<br>
32<br>
33<br>
34<br>
35<br>
36<br>
37<br>
38<br>
39<br>
40<br>
41<br>
42<br>
43<br>
44<br>
45<br>
46<br>
47<br>
48<br>
49<br>
50<br>
51<br>
52<br>
53<br>
54<br>
55<br>
56<br>
57<br>
58<br>
59<br>
60<br>
</p></td><td  align=left valign=top><p><nobr><b>public</b> <b>class</b> FivePointerStar</nobr><br>
<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>public</b> <b>static</b> <b>void</b> main(String[] args)</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>vertices(34, 78, 100);</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>public</b> <b>static</b> <b>void</b> vertices(int centerX, <b>int</b> centerY, <b>int</b> radius)</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>double</b> angleStep = 2 * Math.PI / 5;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>double[][] outerVertices = <b>new</b> double[5][2];</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>for</b> (int i = 0; i &lt; 5; i++)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>double</b> angle = i * angleStep;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>double</b> x = radius * Math.cos(angle);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>double</b> y = radius * Math.sin(angle);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>outerVertices[i][0] = x;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>outerVertices[i][1] = y;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>System.out.printf(<font color=red>"%d:&nbsp;(%.3f,&nbsp;%.3f)\n"</font>, i + 1, x + centerX, y + centerY);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>double[][] innerVertices = <b>new</b> double[5][2];</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>for</b> (int i = 0; i &lt; 5; i++)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>int</b> next = (i + 2) % 5;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>double[] intersection = lineIntersection(</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>outerVertices[i][0], outerVertices[i][1],</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>outerVertices[next][0], outerVertices[next][1],</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>outerVertices[(i + 1) % 5][0], outerVertices[(i + 1) % 5][1],</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>outerVertices[(next + 1) % 5][0], outerVertices[(next + 1) % 5][1]</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>innerVertices[i][0] = intersection[0];</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>innerVertices[i][1] = intersection[1];</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>System.out.printf(<font color=red>"%d:&nbsp;(%.3f,&nbsp;%.3f)\n"</font>, i + 6, intersection[0] * radius + centerX, intersection[1] * radius + centerY);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>private</b> <b>static</b> double[] lineIntersection(double x1, <b>double</b> y1, <b>double</b> x2, <b>double</b> y2, <b>double</b> x3, <b>double</b> y3, <b>double</b> x4, <b>double</b> y4)</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>double</b> d = (x1 - x2) * (y3 - y4) - (y1 - y2) * (x3 - x4);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>if</b> (d == 0)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>throw</b> <b>new</b> IllegalArgumentException(<font color=red>"Lines&nbsp;do&nbsp;not&nbsp;intersect"</font>);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>double</b> t = ((x1 - x3) * (y3 - y4) - (y1 - y3) * (x3 - x4)) / d;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>double</b> u = -((x1 - x2) * (y1 - y3) - (y1 - y2) * (x1 - x3)) / d;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>double</b> ix = x1 + t * (x2 - x1);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>double</b> iy = y1 + t * (y2 - y1);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>return</b> <b>new</b> double[]</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>ix, iy</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>};</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
<nobr>}</nobr><br>
</p></td></tr></table>
<table align=left><tr><td  align=right style=color:teal valign=top><p>1<br>
2<br>
3<br>
4<br>
5<br>
6<br>
7<br>
8<br>
9<br>
10<br>
11<br>
12<br>
13<br>
14<br>
15<br>
16<br>
17<br>
18<br>
19<br>
20<br>
21<br>
22<br>
23<br>
24<br>
25<br>
26<br>
27<br>
28<br>
29<br>
30<br>
31<br>
32<br>
33<br>
34<br>
35<br>
36<br>
37<br>
38<br>
39<br>
40<br>
41<br>
42<br>
43<br>
44<br>
45<br>
46<br>
47<br>
48<br>
49<br>
50<br>
51<br>
52<br>
53<br>
54<br>
55<br>
</p></td><td  align=left valign=top><p><nobr><b>import</b> javax.swing.JFrame;</nobr><br>
<nobr><b>import</b> javax.swing.JPanel;</nobr><br>
<nobr><b>import</b> java.awt.Graphics;</nobr><br>
<nobr><b>import</b> java.awt.Color;</nobr><br>
<nobr></nobr><br>
<nobr><b>public</b> <b>class</b> DrawYellowStar <b>extends</b> JPanel</nobr><br>
<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>@Override</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>protected</b> <b>void</b> paintComponent(Graphics g)</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>super.paintComponent(g);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><font color=green>//&nbsp;Set&nbsp;color&nbsp;to&nbsp;yellow</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></font>g.setColor(Color.YELLOW);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><font color=green>//&nbsp;Define&nbsp;the&nbsp;five&nbsp;points&nbsp;of&nbsp;the&nbsp;star</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></font>int[] xPoints =</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>150, 225, 275, 175, 125</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>};</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>int[] yPoints =</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>50, 100, 50, 150, 150</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>};</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><font color=green>//&nbsp;Adjust&nbsp;the&nbsp;coordinates&nbsp;for&nbsp;a&nbsp;correct&nbsp;five-pointed&nbsp;star</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></font>int[] xPointsCorrect =</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>150, 225, 275, 225, 150</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>};</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>int[] yPointsCorrect =</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>50, 100, 150, 200, 150</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>};</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><font color=green>//&nbsp;Use&nbsp;fillPolygon&nbsp;method&nbsp;to&nbsp;draw&nbsp;the&nbsp;star</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></font>g.fillPolygon(xPointsCorrect, yPointsCorrect, 5);</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>public</b> <b>static</b> <b>void</b> main(String[] args)</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><font color=green>//&nbsp;Create&nbsp;a&nbsp;new&nbsp;JFrame</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></font>JFrame frame = <b>new</b> JFrame(<font color=red>"Yellow&nbsp;Five-Pointed&nbsp;Star"</font>);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>frame.setSize(300, 300);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><font color=green>//&nbsp;Add&nbsp;the&nbsp;custom&nbsp;panel&nbsp;to&nbsp;the&nbsp;frame</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></font>DrawYellowStar panel = <b>new</b> DrawYellowStar();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>frame.add(panel);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><font color=green>//&nbsp;Show&nbsp;the&nbsp;frame</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></font>frame.setVisible(true);</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
<nobr>}</nobr><br>
</p></td></tr></table>
<table align=left><tr><td  align=right style=color:teal valign=top><p>1<br>
2<br>
3<br>
4<br>
5<br>
6<br>
7<br>
8<br>
9<br>
10<br>
11<br>
12<br>
13<br>
14<br>
15<br>
16<br>
17<br>
18<br>
19<br>
20<br>
21<br>
22<br>
23<br>
24<br>
25<br>
26<br>
27<br>
28<br>
29<br>
30<br>
31<br>
32<br>
33<br>
34<br>
35<br>
36<br>
37<br>
38<br>
</p></td><td  align=left valign=top><p><nobr><font color=green>/**</nobr><br>
<nobr>*&nbsp;在&nbsp;(centerx,&nbsp;centery)&nbsp;处绘制一个半径为&nbsp;radius&nbsp;的五角星。</nobr><br>
<nobr>*</nobr><br>
<nobr>*&nbsp;@param&nbsp;centerx&nbsp;星星中心的&nbsp;x&nbsp;坐标</nobr><br>
<nobr>*&nbsp;@param&nbsp;centery&nbsp;星星中心的&nbsp;y&nbsp;坐标</nobr><br>
<nobr>*&nbsp;@param&nbsp;radius&nbsp;从中心到星星尖端的距离</nobr><br>
<nobr>*&nbsp;@param&nbsp;g&nbsp;用于绘制的&nbsp;Graphics&nbsp;对象</nobr><br>
<nobr>*/</font></nobr><br>
<nobr><b>public</b> <b>void</b> paintStart(int centerx, <b>int</b> centery, <b>int</b> radius, Graphics g)</nobr><br>
<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><font color=green>//&nbsp;定义星星各点的角度</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr></font><b>double</b> angle = Math.toRadians(18); <font color=green>//&nbsp;18&nbsp;度转换为弧度</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr></font><b>double</b> innerAngle = Math.toRadians(36); <font color=green>//&nbsp;36&nbsp;度转换为弧度</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr></font></nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><font color=green>//&nbsp;初始化数组存储点的坐标</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr></font>int[] xPoints = <b>new</b> int[10];</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>int[] yPoints = <b>new</b> int[10];</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><font color=green>//&nbsp;计算点的坐标</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr></font><b>for</b> (int i = 0; i &lt; 5; i++)</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><font color=green>//&nbsp;外部点</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></font><b>double</b> outerAngle = i * 2 * Math.PI / 5 + angle;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>xPoints[i * 2] = centerx + (int) (radius * Math.cos(outerAngle));</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>yPoints[i * 2] = centery + (int) (radius * Math.sin(outerAngle));</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><font color=green>//&nbsp;内部点</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></font><b>double</b> innerAngleOffset = (i * 2 * Math.PI / 5 + angle) + innerAngle;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>xPoints[i * 2 + 1] = centerx + (int) (radius * Math.cos(innerAngleOffset) / 2.618);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>yPoints[i * 2 + 1] = centery + (int) (radius * Math.sin(innerAngleOffset) / 2.618);</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><font color=green>//&nbsp;创建&nbsp;Polygon&nbsp;对象</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr></font>Polygon star = <b>new</b> Polygon(xPoints, yPoints, 10);</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><font color=green>//&nbsp;绘制星星</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr></font>g.fillPolygon(star);</nobr><br>
<nobr>}</nobr><br>
</p></td></tr></table>
<table align=left><tr><td  align=right style=color:teal valign=top><p>1<br>
2<br>
3<br>
4<br>
5<br>
6<br>
7<br>
8<br>
9<br>
10<br>
11<br>
12<br>
13<br>
14<br>
15<br>
16<br>
17<br>
18<br>
19<br>
20<br>
21<br>
22<br>
23<br>
24<br>
25<br>
26<br>
27<br>
28<br>
29<br>
30<br>
31<br>
32<br>
33<br>
34<br>
35<br>
36<br>
37<br>
38<br>
39<br>
40<br>
41<br>
42<br>
43<br>
44<br>
45<br>
46<br>
47<br>
48<br>
49<br>
50<br>
51<br>
52<br>
53<br>
54<br>
55<br>
56<br>
57<br>
58<br>
59<br>
60<br>
61<br>
62<br>
63<br>
64<br>
65<br>
66<br>
67<br>
68<br>
69<br>
70<br>
71<br>
72<br>
73<br>
74<br>
75<br>
76<br>
77<br>
78<br>
79<br>
80<br>
81<br>
82<br>
83<br>
84<br>
85<br>
</p></td><td  align=left valign=top><p><nobr><b>import</b> javax.swing.*;</nobr><br>
<nobr><b>import</b> java.awt.*;</nobr><br>
<nobr><b>import</b> java.awt.geom.*;</nobr><br>
<nobr><b>public</b> <b>class</b> ChineseFlag <b>extends</b> JPanel</nobr><br>
<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><font color=green>//&nbsp;Set&nbsp;the&nbsp;width&nbsp;and&nbsp;height&nbsp;of&nbsp;the&nbsp;flag</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr></font><b>private</b> <b>static</b> <b>final</b> <b>int</b> FLAG_WIDTH = 800;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>private</b> <b>static</b> <b>final</b> <b>int</b> FLAG_HEIGHT = 480;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><font color=green>//&nbsp;Main&nbsp;method&nbsp;to&nbsp;set&nbsp;up&nbsp;the&nbsp;window</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr></font><b>public</b> <b>static</b> <b>void</b> main(String[] args)</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>JFrame frame = <b>new</b> JFrame(<font color=red>"Chinese&nbsp;National&nbsp;Flag"</font>);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>ChineseFlag panel = <b>new</b> ChineseFlag();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>frame.setSize(FLAG_WIDTH, FLAG_HEIGHT);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>frame.add(panel);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>frame.setVisible(true);</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><font color=green>//&nbsp;Paint&nbsp;method&nbsp;to&nbsp;draw&nbsp;the&nbsp;flag</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr></font>@Override</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>protected</b> <b>void</b> paintComponent(Graphics g)</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>super.paintComponent(g);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><font color=green>//&nbsp;Get&nbsp;the&nbsp;graphics&nbsp;object</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></font>Graphics2D g2d = (Graphics2D) g;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><font color=green>//&nbsp;Anti-aliasing&nbsp;for&nbsp;smoother&nbsp;lines</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></font>g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><font color=green>//&nbsp;Set&nbsp;the&nbsp;background&nbsp;to&nbsp;red&nbsp;(the&nbsp;flag's&nbsp;background&nbsp;color)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></font>g2d.setColor(new Color(222, 41, 19));</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><font color=green>//&nbsp;Red&nbsp;color&nbsp;of&nbsp;the&nbsp;flag</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></font>g2d.fillRect(0, 0, FLAG_WIDTH, FLAG_HEIGHT);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><font color=green>//&nbsp;Draw&nbsp;the&nbsp;large&nbsp;star</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></font>g2d.setColor(Color.YELLOW);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>drawStar(g2d, 100, 80, 50, 20, 5);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><font color=green>//&nbsp;Draw&nbsp;the&nbsp;smaller&nbsp;stars</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></font>drawSmallStars(g2d);</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><font color=green>//&nbsp;Method&nbsp;to&nbsp;draw&nbsp;a&nbsp;star&nbsp;at&nbsp;a&nbsp;given&nbsp;position</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr></font><b>private</b> <b>void</b> drawStar(Graphics2D g2d, <b>int</b> x, <b>int</b> y, <b>int</b> radius1, <b>int</b> radius2, <b>int</b> numPoints)</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><font color=green>//&nbsp;The&nbsp;angle&nbsp;between&nbsp;each&nbsp;point&nbsp;on&nbsp;the&nbsp;star</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></font><b>double</b> angle = Math.PI / numPoints;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><font color=green>//&nbsp;Create&nbsp;a&nbsp;polygon&nbsp;representing&nbsp;the&nbsp;star</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></font>GeneralPath path = <b>new</b> GeneralPath();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><font color=green>//&nbsp;First&nbsp;point&nbsp;of&nbsp;the&nbsp;star</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></font>path.moveTo(x + Math.cos(0) * radius1, y - Math.sin(0) * radius1);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><font color=green>//&nbsp;Alternate&nbsp;between&nbsp;outer&nbsp;and&nbsp;inner&nbsp;points</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></font><b>for</b> (int i = 1; i &lt; 2 * numPoints; i++)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>double</b> currentAngle = i * angle;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>double</b> currentRadius = (i % 2 == 0) ? radius1 : radius2;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>path.lineTo(x + Math.cos(currentAngle) * currentRadius, y - Math.sin(currentAngle) * currentRadius);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>path.closePath();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>g2d.fill(path);</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><font color=green>//&nbsp;Draw&nbsp;the&nbsp;smaller&nbsp;stars&nbsp;on&nbsp;the&nbsp;flag</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr></font><b>private</b> <b>void</b> drawSmallStars(Graphics2D g2d)</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>int[][] positions =</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>200, 50</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>,</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>250, 100</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>,</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>250, 150</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>,</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>200, 200</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><font color=green>//&nbsp;Relative&nbsp;positions&nbsp;for&nbsp;the&nbsp;smaller&nbsp;stars</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></font></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>};</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>for</b> (int[] position : positions)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>drawStar(g2d, position[0], position[1], 20, 8, 5);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
<nobr>}</nobr><br>
</p></td></tr></table>
<table align=left><tr><td  align=right style=color:teal valign=top><p>1<br>
2<br>
3<br>
4<br>
5<br>
6<br>
7<br>
8<br>
9<br>
10<br>
11<br>
12<br>
13<br>
14<br>
15<br>
16<br>
17<br>
18<br>
19<br>
20<br>
21<br>
22<br>
23<br>
24<br>
25<br>
26<br>
27<br>
28<br>
29<br>
30<br>
31<br>
32<br>
33<br>
34<br>
35<br>
36<br>
37<br>
38<br>
39<br>
40<br>
41<br>
42<br>
43<br>
</p></td><td  align=left valign=top><p><nobr>Here is a possible implementation of the FlagStarCoordinates <b>class</b> that would produce</nobr><br>
<nobr>some sample output:</nobr><br>
<nobr><b>public</b> <b>class</b> FlagStarCoordinates</nobr><br>
<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>public</b> <b>static</b> int[][] starCordinate(boolean isLarge, <b>int</b> index)</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>if</b> (isLarge)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>return</b> <b>new</b> int[][]</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>10, 10}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>, {20, 30}, {30, 10}, {20, -10</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>,</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>0, 0</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>};</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>else</b></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>switch</b> (index)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>case</b> 1:</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>return</b> <b>new</b> int[][]</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>50, 10}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>, {60, 30}, {70, 10}, {60, -10</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>,</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>40, 0</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>};</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><font color=green>//&nbsp;其他小星星的坐标可以类似地添加</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></font>default:</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>return</b> null;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
<nobr>}</nobr><br>
</p></td></tr></table>
<table align=left><tr><td  align=right style=color:teal valign=top><p>1<br>
2<br>
3<br>
4<br>
5<br>
6<br>
7<br>
8<br>
9<br>
10<br>
11<br>
</p></td><td  align=left valign=top><p><nobr><b>void</b> paintStar(int [][] vertaxCoordinates, Graphics g)</nobr><br>
<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>int</b> [] x = <b>new</b> int[vertaxCoordinates.length];</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>int</b> [] y = <b>new</b> int[vertaxCoordinates.length];</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>for</b> (int i=0; i &lt;  vertaxCoordinates.length; i++)</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>x[i] = vertaxCoordinates[i][0];</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>y[i] = vertaxCoordinates[i][1];</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>g.paintPolygon(x,y);</nobr><br>
<nobr>}</nobr><br>
</p></td></tr></table>
<table align=left><tr><td  align=right style=color:teal valign=top><p>1<br>
2<br>
3<br>
4<br>
5<br>
6<br>
7<br>
8<br>
9<br>
10<br>
11<br>
12<br>
13<br>
14<br>
15<br>
16<br>
17<br>
18<br>
19<br>
20<br>
21<br>
22<br>
23<br>
24<br>
25<br>
26<br>
27<br>
28<br>
29<br>
30<br>
31<br>
32<br>
33<br>
34<br>
35<br>
36<br>
37<br>
38<br>
39<br>
40<br>
41<br>
42<br>
43<br>
44<br>
45<br>
46<br>
47<br>
48<br>
49<br>
50<br>
51<br>
52<br>
53<br>
54<br>
55<br>
56<br>
57<br>
58<br>
59<br>
60<br>
61<br>
62<br>
63<br>
64<br>
65<br>
66<br>
67<br>
68<br>
69<br>
70<br>
71<br>
72<br>
73<br>
74<br>
75<br>
76<br>
77<br>
78<br>
79<br>
80<br>
81<br>
82<br>
83<br>
84<br>
85<br>
86<br>
87<br>
88<br>
89<br>
90<br>
91<br>
92<br>
93<br>
94<br>
95<br>
96<br>
97<br>
98<br>
99<br>
100<br>
101<br>
102<br>
103<br>
104<br>
105<br>
106<br>
107<br>
108<br>
109<br>
110<br>
111<br>
112<br>
113<br>
114<br>
115<br>
116<br>
117<br>
118<br>
119<br>
120<br>
121<br>
</p></td><td  align=left valign=top><p><nobr><b>import</b> javax.swing.*;</nobr><br>
<nobr><b>import</b> java.awt.*;</nobr><br>
<nobr></nobr><br>
<nobr><b>public</b> <b>class</b> NationalFlagApp <b>extends</b> JFrame</nobr><br>
<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>public</b> <b>static</b> <b>void</b> main(String[] args)</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><font color=green>//&nbsp;Create&nbsp;and&nbsp;set&nbsp;up&nbsp;the&nbsp;window</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></font>NationalFlagApp frame = <b>new</b> NationalFlagApp();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>frame.setSize(600, 400);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>frame.setVisible(true);</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>public</b> NationalFlagApp()</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><font color=green>//&nbsp;Add&nbsp;a&nbsp;custom&nbsp;panel&nbsp;to&nbsp;draw&nbsp;the&nbsp;flag</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></font>add(new FlagPanel());</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>private</b> <b>class</b> FlagPanel <b>extends</b> JPanel</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>@Override</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>protected</b> <b>void</b> paintComponent(Graphics g)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>super.paintComponent(g);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><font color=green>//&nbsp;Set&nbsp;background&nbsp;color&nbsp;to&nbsp;red</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></font>g.setColor(Color.RED);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>g.fillRect(0, 0, getWidth(), getHeight());</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><font color=green>//&nbsp;Define&nbsp;the&nbsp;coordinates&nbsp;of&nbsp;the&nbsp;large&nbsp;star's&nbsp;vertices</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></font>int[][] largeStarCoordinates =</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>100, 150}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>, {150, 100}, {200, 150}, {150, 200</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>,</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>100, 250</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>};</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><font color=green>//&nbsp;Define&nbsp;the&nbsp;coordinates&nbsp;of&nbsp;the&nbsp;small&nbsp;stars'&nbsp;vertices</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></font>int[][] smallStar1Coordinates =</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>250, 120}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>, {270, 100}, {290, 120}, {270, 140</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>,</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>250, 160</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>};</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>int[][] smallStar2Coordinates =</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>300, 140}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>, {320, 120}, {340, 140}, {320, 160</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>,</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>300, 180</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>};</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>int[][] smallStar3Coordinates =</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>300, 180}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>, {320, 160}, {340, 180}, {320, 200</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>,</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>300, 220</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>};</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>int[][] smallStar4Coordinates =</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>250, 200}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>, {270, 180}, {290, 200}, {270, 220</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>,</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>250, 240</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>};</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><font color=green>//&nbsp;Set&nbsp;color&nbsp;to&nbsp;yellow</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></font>g.setColor(Color.YELLOW);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><font color=green>//&nbsp;Draw&nbsp;the&nbsp;large&nbsp;star</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></font>paintStar(largeStarCoordinates, g);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><font color=green>//&nbsp;Draw&nbsp;the&nbsp;small&nbsp;stars</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></font>paintStar(smallStar1Coordinates, g);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>paintStar(smallStar2Coordinates, g);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>paintStar(smallStar3Coordinates, g);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>paintStar(smallStar4Coordinates, g);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><font color=green>//&nbsp;Method&nbsp;to&nbsp;draw&nbsp;a&nbsp;star</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></font><b>private</b> <b>void</b> paintStar(int[][] vertexCoordinates, Graphics g)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>int</b> n = vertexCoordinates.length;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>Polygon polygon = <b>new</b> Polygon();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><font color=green>//&nbsp;Add&nbsp;all&nbsp;the&nbsp;points&nbsp;to&nbsp;the&nbsp;Polygon</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></font><b>for</b> (int i = 0; i &lt; n; i++)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>polygon.addPoint(vertexCoordinates[i][0], vertexCoordinates[i][1]);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><font color=green>//&nbsp;Draw&nbsp;the&nbsp;star&nbsp;using&nbsp;the&nbsp;Graphics&nbsp;object</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></font>g.fillPolygon(polygon);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
<nobr>}</nobr><br>
</p></td></tr></table>
<table align=left><tr><td  align=right style=color:teal valign=top><p>1<br>
2<br>
3<br>
4<br>
5<br>
6<br>
7<br>
8<br>
9<br>
10<br>
11<br>
12<br>
13<br>
14<br>
15<br>
16<br>
17<br>
18<br>
19<br>
20<br>
21<br>
22<br>
23<br>
24<br>
25<br>
26<br>
27<br>
28<br>
29<br>
30<br>
31<br>
32<br>
33<br>
34<br>
35<br>
</p></td><td  align=left valign=top><p><nobr><b>import</b> java.util.Scanner;</nobr><br>
<nobr></nobr><br>
<nobr><b>public</b> <b>class</b> SumNumbers</nobr><br>
<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>public</b> <b>static</b> <b>void</b> main(String[] args)</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>Scanner scanner = <b>new</b> Scanner(System.in);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>System.out.println(<font color=red>"Enter&nbsp;two&nbsp;or&nbsp;more&nbsp;numbers&nbsp;separated&nbsp;by&nbsp;spaces:"</font>);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>boolean</b> isValidInput = true;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>double</b> sum = 0.0;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>while</b> (scanner.hasNext())</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>if</b> (scanner.hasNextDouble())</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>double</b> number = scanner.nextDouble();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>sum += number;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>else</b></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>System.out.println(<font color=red>"NaN"</font>);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>isValidInput = false;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>break;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>if</b> (isValidInput)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>System.out.println(<font color=red>"The&nbsp;sum&nbsp;is:&nbsp;"</font>+ sum);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>scanner.close();</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
<nobr>}</nobr><br>
</p></td></tr></table>
<table align=left><tr><td  align=right style=color:teal valign=top><p>1<br>
2<br>
3<br>
4<br>
5<br>
6<br>
7<br>
8<br>
9<br>
10<br>
11<br>
12<br>
13<br>
14<br>
15<br>
16<br>
17<br>
18<br>
19<br>
20<br>
21<br>
22<br>
23<br>
24<br>
25<br>
26<br>
27<br>
28<br>
29<br>
30<br>
31<br>
32<br>
33<br>
34<br>
35<br>
36<br>
37<br>
38<br>
</p></td><td  align=left valign=top><p><nobr><b>import</b> java.util.Scanner;</nobr><br>
<nobr></nobr><br>
<nobr><b>public</b> <b>class</b> Sum</nobr><br>
<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>public</b> <b>static</b> <b>void</b> main(String[] args)</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>double</b> sum = 0.0;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>Scanner s = <b>new</b> Scanner(System.in);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>while</b> (true)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><font color=green>//&nbsp;Read&nbsp;the&nbsp;next&nbsp;line</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></font>String line = s.nextLine().trim();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><font color=green>//&nbsp;Check&nbsp;if&nbsp;it&nbsp;is&nbsp;the&nbsp;end&nbsp;marker</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></font><b>if</b> (line.equals(<font color=red>"The&nbsp;end"</font>))</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>break;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><font color=green>//&nbsp;Split&nbsp;the&nbsp;line&nbsp;by&nbsp;the&nbsp;colon&nbsp;and&nbsp;space</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></font>String[] parts = line.split(<font color=red>":\\s*"</font>);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><font color=green>//&nbsp;Parse&nbsp;the&nbsp;amount&nbsp;part</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></font><b>try</b></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>double</b> amount = Double.parseDouble(parts[1].trim());</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>sum += amount;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>catch</b> (Exception e)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>System.out.println(<font color=red>"Error&nbsp;parsing&nbsp;line:&nbsp;"</font>+ line);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>System.out.println(<font color=red>"sum="</font>+ sum);</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
<nobr>}</nobr><br>
</p></td></tr></table>
<table align=left><tr><td  align=right style=color:teal valign=top><p>1<br>
2<br>
3<br>
4<br>
5<br>
6<br>
7<br>
8<br>
9<br>
10<br>
11<br>
12<br>
13<br>
14<br>
15<br>
16<br>
17<br>
18<br>
19<br>
20<br>
21<br>
22<br>
23<br>
24<br>
25<br>
26<br>
27<br>
28<br>
29<br>
30<br>
31<br>
32<br>
33<br>
34<br>
35<br>
36<br>
37<br>
38<br>
39<br>
40<br>
41<br>
42<br>
43<br>
44<br>
45<br>
46<br>
47<br>
48<br>
49<br>
50<br>
51<br>
52<br>
53<br>
54<br>
55<br>
56<br>
57<br>
58<br>
59<br>
60<br>
61<br>
62<br>
63<br>
64<br>
65<br>
66<br>
67<br>
68<br>
69<br>
70<br>
71<br>
72<br>
73<br>
74<br>
75<br>
76<br>
77<br>
78<br>
79<br>
80<br>
81<br>
82<br>
83<br>
84<br>
85<br>
86<br>
87<br>
88<br>
89<br>
90<br>
91<br>
92<br>
93<br>
94<br>
95<br>
96<br>
97<br>
98<br>
99<br>
100<br>
101<br>
102<br>
103<br>
104<br>
105<br>
106<br>
107<br>
108<br>
109<br>
110<br>
111<br>
112<br>
113<br>
114<br>
115<br>
116<br>
117<br>
118<br>
119<br>
120<br>
121<br>
122<br>
123<br>
124<br>
125<br>
126<br>
127<br>
128<br>
129<br>
130<br>
131<br>
132<br>
133<br>
134<br>
135<br>
136<br>
137<br>
138<br>
139<br>
140<br>
141<br>
142<br>
143<br>
144<br>
145<br>
146<br>
147<br>
148<br>
149<br>
150<br>
151<br>
152<br>
153<br>
154<br>
155<br>
156<br>
157<br>
158<br>
159<br>
160<br>
161<br>
162<br>
163<br>
164<br>
165<br>
166<br>
167<br>
168<br>
169<br>
170<br>
171<br>
172<br>
173<br>
174<br>
175<br>
176<br>
177<br>
178<br>
</p></td><td  align=left valign=top><p><nobr><b>import</b> java.util.Scanner;</nobr><br>
<nobr></nobr><br>
<nobr><b>public</b> <b>class</b> DataStatistics</nobr><br>
<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>public</b> <b>static</b> <b>void</b> main(String[] args)</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>StringBuilder storestring = <b>new</b> StringBuilder();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>Scanner s = <b>new</b> Scanner(System.in);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>int</b> n = 0;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>double</b> idsum = 0, Gradesum = 0, Scoresum = 0, Absencesum = 0, Timesum = 0, Startsum = 0, Subsum = 0, Quizsum = 0, Ordersum = 0;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>double</b> idmean = 0, Grademean = 0, Scoremean = 0, Absencemean = 0, Timemean = 0, Startmean = 0, Submean = 0, Quizmean = 0, Ordermean = 0;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>double</b> iddev = 0, Gradedev = 0, Scoredev = 0, Absencedev = 0, Timedev = 0, Startdev = 0, Subdev = 0, Quizdev = 0, Orderdev = 0;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>s.useDelimiter(<font color=red>"\t|\n"</font>);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>while</b> (s.hasNext())</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>String id = s.next().trim();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>String Grade = s.next().trim();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>String Score = s.next().trim();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>String Absence = s.next().trim();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>String Time = s.next().trim();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>String Start = s.next().trim();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>String Sub = s.next().trim();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>String Quiz = s.next().trim();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>String Order = s.next().trim();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>if</b> (n == 0)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>n++;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>continue;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>storestring.append(id).append(<font color=red>"\t"</font>);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>storestring.append(Grade).append(<font color=red>"\t"</font>);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>storestring.append(Score).append(<font color=red>"\t"</font>);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>storestring.append(Absence).append(<font color=red>"\t"</font>);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>storestring.append(Time).append(<font color=red>"\t"</font>);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>storestring.append(Start).append(<font color=red>"\t"</font>);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>storestring.append(Sub).append(<font color=red>"\t"</font>);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>storestring.append(Quiz).append(<font color=red>"\t"</font>);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>storestring.append(Order).append(<font color=red>"\n"</font>);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>idsum += Double.parseDouble(id);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>Scoresum += Double.parseDouble(Score);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>Absencesum += Double.parseDouble(Absence);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>Timesum += Double.parseDouble(Time);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>Startsum += Double.parseDouble(Start);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>Subsum += Double.parseDouble(Sub);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>Quizsum += Double.parseDouble(Quiz);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>Ordersum += Double.parseDouble(Order);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>double</b> GradeNum = convertGradeToNumber(Grade);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>Gradesum += GradeNum;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>n++;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>idmean = calculateMean(idsum, n - 1);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>Grademean = calculateMean(Gradesum, n - 1);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>Scoremean = calculateMean(Scoresum, n - 1);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>Absencemean = calculateMean(Absencesum, n - 1);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>Timemean = calculateMean(Timesum, n - 1);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>Startmean = calculateMean(Startsum, n - 1);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>Submean = calculateMean(Subsum, n - 1);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>Quizmean = calculateMean(Quizsum, n - 1);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>Ordermean = calculateMean(Ordersum, n - 1);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>printMean(<font color=red>"idmean"</font>, idmean);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>printMean(<font color=red>"Grademean"</font>, Grademean);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>printMean(<font color=red>"Scoremean"</font>, Scoremean);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>printMean(<font color=red>"Absencemean"</font>, Absencemean);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>printMean(<font color=red>"Timemean"</font>, Timemean);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>printMean(<font color=red>"Startmean"</font>, Startmean);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>printMean(<font color=red>"Submean"</font>, Submean);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>printMean(<font color=red>"Quizmean"</font>, Quizmean);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>printMean(<font color=red>"Ordermean"</font>, Ordermean);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>idsum = 0;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>Gradesum = 0;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>Scoresum = 0;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>Absencesum = 0;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>Timesum = 0;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>Startsum = 0;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>Subsum = 0;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>Quizsum = 0;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>Ordersum = 0;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>s = <b>new</b> Scanner(storestring.toString().trim());</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>s.useDelimiter(<font color=red>"\t|\n"</font>);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>while</b> (s.hasNext())</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>String id = s.next().trim();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>String Grade = s.next().trim();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>String Score = s.next().trim();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>String Absence = s.next().trim();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>String Time = s.next().trim();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>String Start = s.next().trim();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>String Sub = s.next().trim();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>String Quiz = s.next().trim();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>String Order = s.next().trim();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>if</b> (n == 0)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>n++;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>continue;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>idsum += Math.pow(Double.parseDouble(id) - idmean, 2);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>Scoresum += Math.pow(Double.parseDouble(Score) - Scoremean, 2);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>Absencesum += Math.pow(Double.parseDouble(Absence) - Absencemean, 2);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>Timesum += Math.pow(Double.parseDouble(Time) - Timemean, 2);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>Startsum += Math.pow(Double.parseDouble(Start) - Startmean, 2);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>Subsum += Math.pow(Double.parseDouble(Sub) - Submean, 2);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>Quizsum += Math.pow(Double.parseDouble(Quiz) - Quizmean, 2);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>Ordersum += Math.pow(Double.parseDouble(Order) - Ordermean, 2);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>double</b> GradeNum = convertGradeToNumber(Grade);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>Gradesum += Math.pow(GradeNum - Grademean, 2);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>n++;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>iddev = calculateStandardDeviation(idsum, n - 1);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>Gradedev = calculateStandardDeviation(Gradesum, n - 1);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>Scoredev = calculateStandardDeviation(Scoresum, n - 1);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>Absencedev = calculateStandardDeviation(Absencesum, n - 1);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>Timedev = calculateStandardDeviation(Timesum, n - 1);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>Startdev = calculateStandardDeviation(Startsum, n - 1);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>Subdev = calculateStandardDeviation(Subsum, n - 1);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>Quizdev = calculateStandardDeviation(Quizsum, n - 1);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>Orderdev = calculateStandardDeviation(Ordersum, n - 1);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>printStandardDeviation(<font color=red>"iddev"</font>, iddev);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>printStandardDeviation(<font color=red>"Gradedev"</font>, Gradedev);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>printStandardDeviation(<font color=red>"Scoredev"</font>, Scoredev);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>printStandardDeviation(<font color=red>"Absencedev"</font>, Absencedev);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>printStandardDeviation(<font color=red>"Timedev"</font>, Timedev);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>printStandardDeviation(<font color=red>"Startdev"</font>, Startdev);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>printStandardDeviation(<font color=red>"Subdev"</font>, Subdev);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>printStandardDeviation(<font color=red>"Quizdev"</font>, Quizdev);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>printStandardDeviation(<font color=red>"Orderdev"</font>, Orderdev);</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>private</b> <b>static</b> <b>double</b> convertGradeToNumber(String grade)</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>switch</b> (grade)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>case</b> <font color=red>"A"</font>: <b>return</b> 4;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>case</b> <font color=red>"B"</font>: <b>return</b> 3;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>case</b> <font color=red>"C"</font>: <b>return</b> 2;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>case</b> <font color=red>"D"</font>: <b>return</b> 1;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>default: <b>return</b> 0;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>private</b> <b>static</b> <b>double</b> calculateMean(double sum, <b>int</b> count)</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>return</b> sum / count;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>private</b> <b>static</b> <b>double</b> calculateStandardDeviation(double sumOfSquares, <b>int</b> count)</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>return</b> Math.sqrt(sumOfSquares / count);</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>private</b> <b>static</b> <b>void</b> printMean(String label, <b>double</b> mean)</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>System.out.printf(<font color=red>"%s:&nbsp;%.4f\n"</font>, label, mean);</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>private</b> <b>static</b> <b>void</b> printStandardDeviation(String label, <b>double</b> stdDev)</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>System.out.printf(<font color=red>"%s:&nbsp;%.4f\n"</font>, label, stdDev);</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
<nobr>}</nobr><br>
</p></td></tr></table>
<table align=left><tr><td  align=right style=color:teal valign=top><p>1<br>
2<br>
3<br>
4<br>
5<br>
6<br>
7<br>
8<br>
9<br>
10<br>
11<br>
12<br>
13<br>
14<br>
15<br>
16<br>
17<br>
18<br>
19<br>
20<br>
21<br>
22<br>
23<br>
24<br>
25<br>
26<br>
27<br>
28<br>
29<br>
30<br>
31<br>
32<br>
33<br>
34<br>
35<br>
36<br>
37<br>
38<br>
39<br>
40<br>
41<br>
42<br>
43<br>
44<br>
45<br>
46<br>
47<br>
48<br>
49<br>
50<br>
51<br>
52<br>
53<br>
54<br>
55<br>
56<br>
57<br>
58<br>
59<br>
60<br>
61<br>
62<br>
63<br>
64<br>
65<br>
66<br>
67<br>
68<br>
69<br>
70<br>
71<br>
72<br>
73<br>
74<br>
75<br>
76<br>
77<br>
78<br>
79<br>
80<br>
81<br>
82<br>
83<br>
</p></td><td  align=left valign=top><p><nobr><b>import</b> java.awt.Color;</nobr><br>
<nobr><b>import</b> java.awt.Graphics;</nobr><br>
<nobr><b>import</b> javax.swing.JFrame;</nobr><br>
<nobr></nobr><br>
<nobr><b>public</b> <b>class</b> TurkishFlag <b>extends</b> FlagCanvas</nobr><br>
<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>private</b> <b>int</b> flagWidth, flagHeight;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>private</b> <b>double</b> G, A, B, C, D, E, F;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>public</b> TurkishFlag(int w)</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>super(w);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>flagWidth = w;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>flagHeight = (int) (w * 1.5);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>G = w;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>A = G / 2;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>B = G / 2;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>C = 0.0625 * G;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>D = 0.4 * G;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>E = G / 3;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>F = G / 4;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>void</b> paintMoon(Graphics g, Color bgcolor, <b>int</b> radius, <b>int</b> centerx, <b>int</b> centery)</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>g.setColor(bgcolor);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>g.fillOval(centerx - radius, centery - radius, 2 * radius, 2 * radius);</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>public</b> <b>void</b> paintStar(double centerX, <b>double</b> centerY, <b>double</b> radius, <b>double</b> ang, Graphics g)</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>g.setColor(Color.WHITE);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>int[][] d = vertices(centerX, centerY, radius, ang);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>g.fillPolygon(d[0], d[1], 10);</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>public</b> <b>void</b> paint(Graphics g)</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>g.setColor(Color.RED);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>g.fillRect(0, 0, flagWidth, flagHeight);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>int</b> moonCenterX = (int) (flagWidth - A);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>int</b> moonCenterY = flagHeight / 2;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>int</b> moonRadius = (int) (B / 2);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>int</b> innerMoonCenterX = (int) (moonCenterX - C);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>int</b> innerMoonRadius = (int) (D / 2);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>int</b> starCenterX = (int) (moonCenterX - E);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>int</b> starCenterY = moonCenterY;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>int</b> starRadius = (int) (F / 2);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>paintMoon(g, Color.RED, moonRadius, moonCenterX, moonCenterY);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>paintMoon(g, Color.WHITE, innerMoonRadius, innerMoonCenterX, moonCenterY);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>paintStar(starCenterX, starCenterY, starRadius, 0, g);</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>public</b> <b>static</b> <b>void</b> main(String[] args)</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>JFrame frame = <b>new</b> JFrame(<font color=red>"Turkish&nbsp;National&nbsp;Flag&nbsp;Simulation"</font>);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>TurkishFlag canvas = <b>new</b> TurkishFlag(576);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>frame.setSize(canvas.flagWidth, canvas.flagHeight);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>frame.getContentPane().add(canvas);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>frame.setVisible(true);</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>private</b> int[][] vertices(double centerX, <b>double</b> centerY, <b>double</b> radius, <b>double</b> angle)</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>int[] xPoints = <b>new</b> int[10];</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>int[] yPoints = <b>new</b> int[10];</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>double</b> angleIncrement = 2 * Math.PI / 10;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>for</b> (int i = 0; i &lt; 10; i++)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>double</b> x = centerX + radius * Math.cos(angle + i * angleIncrement);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>double</b> y = centerY + radius * Math.sin(angle + i * angleIncrement);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>xPoints[i] = (int) x;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>yPoints[i] = (int) y;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>return</b> <b>new</b> int[][]</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>xPoints, yPoints</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>};</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
<nobr>}</nobr><br>
</p></td></tr></table>
<table align=left><tr><td  align=right style=color:teal valign=top><p>1<br>
2<br>
3<br>
4<br>
5<br>
6<br>
7<br>
8<br>
10<br>
11<br>
12<br>
13<br>
14<br>
15<br>
16<br>
17<br>
18<br>
19<br>
20<br>
21<br>
22<br>
23<br>
24<br>
25<br>
26<br>
27<br>
28<br>
29<br>
30<br>
31<br>
32<br>
33<br>
34<br>
35<br>
36<br>
37<br>
38<br>
39<br>
40<br>
41<br>
42<br>
43<br>
44<br>
45<br>
46<br>
47<br>
48<br>
49<br>
50<br>
51<br>
52<br>
53<br>
54<br>
55<br>
56<br>
57<br>
58<br>
59<br>
60<br>
61<br>
62<br>
63<br>
64<br>
65<br>
66<br>
67<br>
68<br>
69<br>
70<br>
71<br>
72<br>
73<br>
74<br>
75<br>
76<br>
77<br>
79<br>
80<br>
81<br>
82<br>
83<br>
84<br>
85<br>
86<br>
87<br>
88<br>
89<br>
90<br>
91<br>
92<br>
93<br>
94<br>
95<br>
96<br>
97<br>
98<br>
99<br>
100<br>
101<br>
102<br>
103<br>
104<br>
</p></td><td  align=left valign=top><p><nobr><b>public</b> <b>class</b> PersonInfo <b>extends</b> javax.swing.JFrame</nobr><br>
<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>public</b> PersonInfo()</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>initComponents();</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>private</b> <b>void</b> initComponents()</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>jLabel1 = <b>new</b> javax.swing.JLabel();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>jLabel2 = <b>new</b> javax.swing.JLabel();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>jLabel3 = <b>new</b> javax.swing.JLabel();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>jLabel4 = <b>new</b> javax.swing.JLabel();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>jTextField1 = <b>new</b> javax.swing.JTextField();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>jTextField2 = <b>new</b> javax.swing.JTextField();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>jComboBox1 = <b>new</b> javax.swing.JComboBox&lt;&gt;();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>jScrollPane1 = <b>new</b> javax.swing.JScrollPane();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>jTextArea1 = <b>new</b> javax.swing.JTextArea();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>jButton1 = <b>new</b> javax.swing.JButton();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>jMenuBar1 = <b>new</b> javax.swing.JMenuBar();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>jMenu1 = <b>new</b> javax.swing.JMenu();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>jMenuItem1 = <b>new</b> javax.swing.JMenuItem();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>jMenu2 = <b>new</b> javax.swing.JMenu();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>jLabel1.setText(<font color=red>"Name"</font>);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>jLabel2.setText(<font color=red>"Email"</font>);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>jLabel3.setText(<font color=red>"Country"</font>);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>jLabel4.setText(<font color=red>"Address"</font>);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>jTextField1.setToolTipText(<font color=red>""</font>);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>jComboBox1.setModel(new javax.swing.DefaultComboBoxModel&lt;&gt;(new String[]</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><font color=red>"Cancda"</font>, <font color=red>"USA"</font>, <font color=red>"Mexico"</font></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>));</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>jTextArea1.setColumns(20);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>jTextArea1.setRows(5);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>jScrollPane1.setViewportView(jTextArea1);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>jButton1.setText(<font color=red>"Submit"</font>);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>jButton1.addActionListener(new java.awt.event.ActionListener()</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>public</b> <b>void</b> actionPerformed(java.awt.event.ActionEvent evt)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>jButton1ActionPerformed(evt);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>jMenu1.setText(<font color=red>"File"</font>);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>jMenuItem1.setText(<font color=red>"Save"</font>);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>jMenu1.add(jMenuItem1);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>jMenuBar1.add(jMenu1);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>jMenu2.setText(<font color=red>"Edit"</font>);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>jMenuBar1.add(jMenu2);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>setJMenuBar(jMenuBar1);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>private</b> <b>void</b> jButton1ActionPerformed(java.awt.event.ActionEvent evt)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>System.out.println(jTextField1.getText() + <font color=red>","</font>+ jTextField2.getText() + <font color=red>","</font>+ jComboBox1.getSelectedItem() + <font color=red>","</font>+ jTextArea1.getText());        <font color=green>//&nbsp;TODO&nbsp;add&nbsp;your&nbsp;handling&nbsp;code&nbsp;here:</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></font></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>public</b> <b>static</b> <b>void</b> main(String args[])</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>new</b> PersonInfo().setVisible(true);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><font color=green>//&nbsp;Variables&nbsp;declaration&nbsp;-&nbsp;do&nbsp;not&nbsp;modify&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr></font><b>private</b> javax.swing.JButton jButton1;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>private</b> javax.swing.JComboBox&lt;String&gt; jComboBox1;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>private</b> javax.swing.JLabel jLabel1;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>private</b> javax.swing.JLabel jLabel2;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>private</b> javax.swing.JLabel jLabel3;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>private</b> javax.swing.JLabel jLabel4;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>private</b> javax.swing.JMenu jMenu1;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>private</b> javax.swing.JMenu jMenu2;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>private</b> javax.swing.JMenuBar jMenuBar1;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>private</b> javax.swing.JMenuItem jMenuItem1;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>private</b> javax.swing.JScrollPane jScrollPane1;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>private</b> javax.swing.JTextArea jTextArea1;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>private</b> javax.swing.JTextField jTextField1;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>private</b> javax.swing.JTextField jTextField2;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><font color=green>//&nbsp;End&nbsp;of&nbsp;variables&nbsp;declaration&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr></font></nobr><br>
<nobr>}</nobr><br>
</p></td></tr></table>
<table align=left><tr><td  align=right style=color:teal valign=top><p>1<br>
2<br>
3<br>
4<br>
5<br>
6<br>
7<br>
8<br>
9<br>
10<br>
11<br>
12<br>
13<br>
14<br>
15<br>
16<br>
17<br>
18<br>
19<br>
20<br>
21<br>
22<br>
23<br>
24<br>
25<br>
26<br>
27<br>
28<br>
29<br>
30<br>
31<br>
32<br>
33<br>
34<br>
35<br>
36<br>
37<br>
38<br>
39<br>
40<br>
41<br>
42<br>
43<br>
44<br>
45<br>
46<br>
47<br>
48<br>
49<br>
50<br>
51<br>
52<br>
53<br>
54<br>
55<br>
56<br>
57<br>
58<br>
59<br>
60<br>
61<br>
62<br>
63<br>
64<br>
65<br>
66<br>
67<br>
68<br>
69<br>
70<br>
71<br>
72<br>
73<br>
74<br>
75<br>
76<br>
77<br>
78<br>
79<br>
80<br>
81<br>
82<br>
83<br>
84<br>
85<br>
86<br>
87<br>
88<br>
89<br>
90<br>
91<br>
92<br>
93<br>
94<br>
95<br>
96<br>
97<br>
98<br>
99<br>
100<br>
101<br>
102<br>
103<br>
104<br>
105<br>
106<br>
107<br>
108<br>
109<br>
110<br>
111<br>
112<br>
113<br>
114<br>
115<br>
116<br>
117<br>
118<br>
119<br>
120<br>
121<br>
122<br>
123<br>
124<br>
125<br>
126<br>
127<br>
128<br>
129<br>
130<br>
131<br>
132<br>
133<br>
134<br>
135<br>
136<br>
137<br>
138<br>
139<br>
</p></td><td  align=left valign=top><p><nobr><b>private</b> <b>void</b> initComponents0()</nobr><br>
<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>Container contentPane = getContentPane();</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>contentPane.setLayout(new GridBagLayout());</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>GridBagConstraints c = <b>new</b> GridBagConstraints();</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>JLabel lblName = <b>new</b> JLabel(<font color=red>"Name"</font>);</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>c.gridheight = 1;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>c.anchor = GridBagConstraints.NORTHWEST;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>c.fill = GridBagConstraints.HORIZONTAL;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>c.gridwidth = 1;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>c.gridx = 0;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>c.gridy = 0;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>c.insets = <b>new</b> Insets(1,3,2,2);</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>c.ipadx = 1;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>c.ipady = 1;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>c.weightx =  0;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>c.weighty =  0;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>contentPane.add(lblName,c);</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>JTextField txtName = <b>new</b> JTextField(30);</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>c.gridheight = 1;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>c.anchor = GridBagConstraints.NORTHWEST;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>c.fill = GridBagConstraints.NONE;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>c.gridwidth = 1;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>c.gridx = 1;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>c.gridy = 0;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>c.insets = <b>new</b> Insets(1,3,2,2);</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>c.ipadx = 1;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>c.ipady = 1;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>c.weightx = 1.0;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>c.weighty = 1.0;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>contentPane.add(txtName,c);</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>JLabel lblEmail = <b>new</b> JLabel(<font color=red>"Email"</font>);</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>c.gridheight = 1;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>c.anchor = GridBagConstraints.NORTHWEST;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>c.fill = GridBagConstraints.HORIZONTAL;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>c.gridwidth = 1;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>c.gridx = 0;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>c.gridy = 1;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>c.insets = <b>new</b> Insets(1,3,2,2);</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>c.ipadx = 1;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>c.ipady = 1;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>c.weightx =  0;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>c.weighty =  0;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>contentPane.add(lblEmail,c);</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>lblEmail.setVisible(true);</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>JTextField txtEmail = <b>new</b> JTextField(30);</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>c.gridheight = 1;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>c.anchor = GridBagConstraints.NORTHWEST;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>c.fill = GridBagConstraints.NONE;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>c.gridwidth = 1;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>c.gridx = 1;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>c.gridy = 1;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>c.insets = <b>new</b> Insets(1,3,2,2);</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>c.ipadx = 1;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>c.ipady = 1;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>c.weightx = 1.0;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>c.weighty = 1.0;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>contentPane.add(txtEmail,c);</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>JLabel lblCountry = <b>new</b> JLabel(<font color=red>"Country"</font>);</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>c.gridheight = 1;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>c.anchor = GridBagConstraints.NORTHWEST;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>c.gridwidth = 1;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>c.gridx = 0;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>c.gridy = 2;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>c.insets = <b>new</b> Insets(1,3,2,2);</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>c.ipadx = 1;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>c.ipady = 1;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>c.weightx =  0;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>c.weighty = 0;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>contentPane.add(lblCountry,c);</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>JComboBox cmbCountry = <b>new</b> JComboBox();</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>c.gridheight = 1;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>c.anchor = GridBagConstraints.NORTHWEST;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>c.gridwidth = 1;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>c.gridx = 1;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>c.gridy = 2;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>c.insets = <b>new</b> Insets(1,3,2,2);</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>c.ipadx = 1;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>c.ipady = 1;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>c.weightx = 1.0;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>c.weighty = 1.0;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>contentPane.add(cmbCountry,c);</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>cmbCountry.setModel(new javax.swing.DefaultComboBoxModel&lt;&gt;(new String[]</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><font color=red>"USA"</font>, <font color=red>"Canada"</font>, <font color=red>"Mexico"</font></nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>));</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>JLabel lblAddress = <b>new</b> JLabel(<font color=red>"Address"</font>);</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>c.gridheight = 1;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>c.anchor = GridBagConstraints.NORTHWEST;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>c.fill = GridBagConstraints.HORIZONTAL;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>c.gridwidth = 1;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>c.gridx = 0;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>c.gridy = 3;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>c.insets = <b>new</b> Insets(1,3,2,2);</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>c.ipadx = 1;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>c.ipady = 1;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>c.weightx = 0;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>c.weighty = 0;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>contentPane.add(lblAddress,c);</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>JTextArea txtAddress = <b>new</b> JTextArea(4, 30);</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>c.gridheight = 1;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>c.anchor = GridBagConstraints.NORTHWEST;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>c.fill = GridBagConstraints.HORIZONTAL;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>c.gridwidth = 1;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>c.gridx = 1;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>c.gridy = 3;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>c.insets = <b>new</b> Insets(1,3,2,2);</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>c.ipadx = 1;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>c.ipady = 1;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>c.weightx = 1.0;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>c.weighty = 1.0;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>contentPane.add(txtAddress,c);</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>JButton butSubmit = <b>new</b> JButton(<font color=red>"Submit"</font>);</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>c.gridheight = 1;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>c.anchor = GridBagConstraints.CENTER;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>c.fill = GridBagConstraints.NONE;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>c.gridwidth = 2;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>c.gridx = 0;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>c.gridy = 4;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>c.insets = <b>new</b> Insets(1,3,2,2);</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>c.ipadx = 1;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>c.ipady = 1;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>c.weightx = 1.0;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>c.weighty = 1.0;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>contentPane.add(butSubmit,c);</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>pack();</nobr><br>
<nobr>}</nobr><br>
</p></td></tr></table>
<table align=left><tr><td  align=right style=color:teal valign=top><p>1<br>
2<br>
3<br>
4<br>
5<br>
6<br>
7<br>
8<br>
9<br>
10<br>
11<br>
12<br>
13<br>
14<br>
15<br>
16<br>
17<br>
18<br>
19<br>
20<br>
21<br>
22<br>
23<br>
24<br>
25<br>
26<br>
27<br>
28<br>
29<br>
30<br>
31<br>
32<br>
33<br>
34<br>
35<br>
36<br>
37<br>
38<br>
39<br>
40<br>
41<br>
42<br>
43<br>
44<br>
45<br>
46<br>
47<br>
48<br>
49<br>
50<br>
51<br>
52<br>
53<br>
54<br>
55<br>
56<br>
57<br>
58<br>
59<br>
60<br>
61<br>
62<br>
63<br>
64<br>
65<br>
66<br>
67<br>
68<br>
69<br>
70<br>
71<br>
72<br>
73<br>
74<br>
75<br>
76<br>
77<br>
78<br>
79<br>
80<br>
81<br>
82<br>
83<br>
84<br>
85<br>
86<br>
87<br>
88<br>
89<br>
90<br>
91<br>
92<br>
93<br>
94<br>
95<br>
96<br>
97<br>
98<br>
99<br>
100<br>
101<br>
102<br>
103<br>
104<br>
105<br>
106<br>
107<br>
108<br>
109<br>
110<br>
111<br>
112<br>
113<br>
114<br>
115<br>
116<br>
117<br>
118<br>
119<br>
120<br>
121<br>
122<br>
123<br>
124<br>
</p></td><td  align=left valign=top><p><nobr><b>import</b> javax.swing.*;</nobr><br>
<nobr><b>import</b> java.awt.*;</nobr><br>
<nobr><b>import</b> java.io.FileWriter;</nobr><br>
<nobr><b>import</b> java.io.IOException;</nobr><br>
<nobr></nobr><br>
<nobr><b>public</b> <b>class</b> EditableDatasheet <b>extends</b> JFrame</nobr><br>
<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>private</b> String filepath = <font color=red>"Datasheet.txt"</font>;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>private</b> <b>int</b> totalRows = 0;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>private</b> <b>static</b> <b>final</b> <b>int</b> COLS = 9;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>public</b> EditableDatasheet()</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>setTitle(<font color=red>"Editable&nbsp;Datasheet"</font>);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>setLayout(new GridLayout(totalRows + 1, COLS));</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>createComponents();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>createMenu();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>pack();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>setVisible(true);</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>private</b> <b>void</b> createComponents()</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>for</b> (int row = 0; row &lt;= totalRows; row++)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>for</b> (int col = 0; col &lt; COLS; col++)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>if</b> (row == 0)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>add(new JLabel(<font color=red>"Heading"</font>));</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>else</b> <b>if</b> (col == 1)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>JComboBox&lt;String&gt; cmb = <b>new</b> JComboBox&lt;&gt;(new String[]</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><font color=red>"Option1"</font>, <font color=red>"Option2"</font></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>cmb.setName(<font color=red>"num"</font>+ row + <font color=red>"_"</font>+ col);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>add(cmb);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>else</b></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>JTextField txt = <b>new</b> JTextField();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>txt.setName(<font color=red>"num"</font>+ row + <font color=red>"_"</font>+ col);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>add(txt);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>private</b> <b>void</b> createMenu()</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>JMenuBar menuBar = <b>new</b> JMenuBar();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>JMenu fileMenu = <b>new</b> JMenu(<font color=red>"File"</font>);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>JMenuItem saveItem = <b>new</b> JMenuItem(<font color=red>"Save"</font>);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>saveItem.addActionListener(e -&gt; saveToFile());</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>fileMenu.add(saveItem);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>menuBar.add(fileMenu);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>setJMenuBar(menuBar);</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>private</b> Component get(int row, <b>int</b> col)</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>Component[] components = getContentPane().getComponents();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>for</b> (Component x : components)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>if</b> (x.getName() != <b>null</b> && x.getName().equals(<font color=red>"num"</font>+ row + <font color=red>"_"</font>+ col)) <b>return</b> x;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>return</b> null;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>private</b> <b>void</b> saveToFile()</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>StringBuilder stringBuilder = <b>new</b> StringBuilder();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>for</b> (int row = 0; row &lt;= totalRows; row++)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>for</b> (int col = 0; col &lt; COLS; col++)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>Component comp = get(row, col);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>String value = <font color=red>""</font>;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>if</b> (comp <b>instanceof</b> JLabel)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>value = ((JLabel) comp).getText();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>else</b> <b>if</b> (comp <b>instanceof</b> JTextField)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>value = ((JTextField) comp).getText();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>else</b> <b>if</b> (comp <b>instanceof</b> JComboBox)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>value = (String) ((JComboBox&lt;?&gt;) comp).getSelectedItem();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>stringBuilder.append(value).append(<font color=red>","</font>);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>stringBuilder.setLength(stringBuilder.length() - 1);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>stringBuilder.append(<font color=red>"\n"</font>);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>try</b> (FileWriter f = <b>new</b> FileWriter(filepath + <font color=red>"_edited"</font>))</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>f.write(stringBuilder.toString());</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>catch</b> (IOException e)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>e.printStackTrace();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>public</b> <b>static</b> <b>void</b> main(String[] args)</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>SwingUtilities.invokeLater(() -&gt; <b>new</b> EditableDatasheet());</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>private</b> <b>void</b> loadOriginalData()</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
<nobr>}</nobr><br>
</p></td></tr></table>
<table align=left><tr><td  align=right style=color:teal valign=top><p>1<br>
2<br>
3<br>
4<br>
5<br>
6<br>
7<br>
8<br>
9<br>
10<br>
11<br>
12<br>
13<br>
14<br>
15<br>
16<br>
17<br>
18<br>
19<br>
20<br>
21<br>
22<br>
23<br>
24<br>
25<br>
26<br>
27<br>
28<br>
29<br>
30<br>
31<br>
32<br>
33<br>
34<br>
35<br>
36<br>
37<br>
38<br>
39<br>
40<br>
41<br>
42<br>
43<br>
44<br>
45<br>
46<br>
47<br>
48<br>
49<br>
50<br>
51<br>
52<br>
53<br>
54<br>
55<br>
56<br>
57<br>
58<br>
59<br>
60<br>
61<br>
62<br>
63<br>
64<br>
65<br>
66<br>
67<br>
68<br>
69<br>
70<br>
71<br>
72<br>
73<br>
74<br>
75<br>
76<br>
77<br>
78<br>
79<br>
80<br>
81<br>
82<br>
83<br>
84<br>
85<br>
86<br>
87<br>
88<br>
89<br>
90<br>
91<br>
92<br>
93<br>
94<br>
95<br>
96<br>
97<br>
98<br>
99<br>
100<br>
101<br>
102<br>
103<br>
104<br>
105<br>
106<br>
</p></td><td  align=left valign=top><p><nobr><font color=green>/*</nobr><br>
<nobr>*&nbsp;Click&nbsp;nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt&nbsp;to&nbsp;change&nbsp;this&nbsp;license</nobr><br>
<nobr>*&nbsp;Click&nbsp;nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java&nbsp;to&nbsp;edit&nbsp;this&nbsp;template</nobr><br>
<nobr>*/</font></nobr><br>
<nobr><b>package</b> javaapplication5;import javax.swing.JOptionPane;</nobr><br>
<nobr><b>import</b> java.io.BufferedReader;</nobr><br>
<nobr><b>import</b> java.io.FileReader;</nobr><br>
<nobr><b>import</b> java.io.IOException;public <b>class</b> TextEditor <b>extends</b> javax.swing.JFrame</nobr><br>
<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>private</b> String filepath = <font color=red>""</font>;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>.</nobr><br>
<nobr>}</nobr><br>
<nobr>private <b>void</b> openMenuItemActionPerformed(java.awt.event.ActionEvent evt)</nobr><br>
<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>filepath = JOptionPane.showInputDialog(<font color=red>"Enter&nbsp;the&nbsp;full&nbsp;file&nbsp;path:"</font>);</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>if</b> (filepath != <b>null</b> && !filepath.isEmpty())</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>try</b> (BufferedReader br = <b>new</b> BufferedReader(new FileReader(filepath)))</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>StringBuilder contentBuilder = <b>new</b> StringBuilder();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>String line;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>while</b> ((line = br.readLine()) != null)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>contentBuilder.append(line).append(<font color=red>"\n"</font>);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>txt.setText(contentBuilder.toString());</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>catch</b> (IOException ex)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>JOptionPane.showMessageDialog(this, <font color=red>"Error&nbsp;opening&nbsp;file:&nbsp;"</font>+ ex.getMessage(), <font color=red>"Error"</font>, JOptionPane.ERROR_MESSAGE);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
<nobr>}</nobr><br>
<nobr>private <b>void</b> saveMenuItemActionPerformed(java.awt.event.ActionEvent evt)</nobr><br>
<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>if</b> (!filepath.isEmpty())</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>try</b> (BufferedWriter bw = <b>new</b> BufferedWriter(new FileWriter(filepath)))</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>bw.write(txt.getText());</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>catch</b> (IOException ex)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>JOptionPane.showMessageDialog(this, <font color=red>"Error&nbsp;saving&nbsp;file:&nbsp;"</font>+ ex.getMessage(), <font color=red>"Error"</font>, JOptionPane.ERROR_MESSAGE);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>else</b></nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>JOptionPane.showMessageDialog(this, <font color=red>"No&nbsp;file&nbsp;selected&nbsp;to&nbsp;save."</font>, <font color=red>"Warning"</font>, JOptionPane.WARNING_MESSAGE);</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
<nobr>}</nobr><br>
<nobr><font color=green>/**</nobr><br>
<nobr>&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@param&nbsp;args&nbsp;the&nbsp;command&nbsp;line&nbsp;arguments</nobr><br>
<nobr>&nbsp;&nbsp;&nbsp;&nbsp;*/</font></nobr><br>
<nobr><b>public</b> <b>static</b> <b>void</b> main(String args[])</nobr><br>
<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><font color=green>/*&nbsp;Set&nbsp;the&nbsp;Nimbus&nbsp;look&nbsp;and&nbsp;feel&nbsp;*/</font></nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><font color=green>//&lt;editor-fold&nbsp;defaultstate="collapsed"&nbsp;desc="&nbsp;Look&nbsp;and&nbsp;feel&nbsp;setting&nbsp;code&nbsp;(optional)&nbsp;"&gt;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr></font><font color=green>/*&nbsp;If&nbsp;Nimbus&nbsp;(introduced&nbsp;in&nbsp;Java&nbsp;SE&nbsp;6)&nbsp;is&nbsp;not&nbsp;available,&nbsp;stay&nbsp;with&nbsp;the&nbsp;default&nbsp;look&nbsp;and&nbsp;feel.</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;For&nbsp;details&nbsp;see&nbsp;http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</font></nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>try</b></nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>for</b> (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels())</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>if</b> (<font color=red>"Nimbus"</font>.equals(info.getName()))</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>javax.swing.UIManager.setLookAndFeel(info.getClassName());</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>break;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>catch</b> (ClassNotFoundException ex)</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>catch</b> (InstantiationException ex)</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>catch</b> (IllegalAccessException ex)</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>catch</b> (javax.swing.UnsupportedLookAndFeelException ex)</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><font color=green>//&lt;/editor-fold&gt;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr></font></nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><font color=green>/*&nbsp;Create&nbsp;and&nbsp;display&nbsp;the&nbsp;form&nbsp;*/</font></nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>java.awt.EventQueue.invokeLater(new Runnable()</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>public</b> <b>void</b> run()</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>new</b> NewJFrame().setVisible(true);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>);</nobr><br>
<nobr>}</nobr><br>
</p></td></tr></table>
<table align=left><tr><td  align=right style=color:teal valign=top><p>1<br>
2<br>
3<br>
4<br>
5<br>
6<br>
7<br>
8<br>
9<br>
10<br>
11<br>
12<br>
13<br>
14<br>
15<br>
16<br>
17<br>
18<br>
19<br>
20<br>
21<br>
22<br>
23<br>
24<br>
25<br>
26<br>
27<br>
28<br>
29<br>
30<br>
31<br>
32<br>
33<br>
34<br>
35<br>
36<br>
37<br>
38<br>
39<br>
40<br>
41<br>
42<br>
43<br>
44<br>
45<br>
46<br>
47<br>
48<br>
49<br>
50<br>
51<br>
</p></td><td  align=left valign=top><p><nobr><b>import</b> java.io.File;</nobr><br>
<nobr><b>import</b> java.util.Scanner;</nobr><br>
<nobr></nobr><br>
<nobr><b>public</b> <b>class</b> MyProg</nobr><br>
<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>public</b> <b>static</b> <b>void</b> main(String[] args) <b>throws</b> Exception</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>Scanner scanner = <b>new</b> Scanner(new File(args[0]));</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>int</b> n = 0, row = -1, col = 0;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>float</b> sum;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>String grades = <font color=red>"FDCBA"</font>;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>String[] headings = <b>new</b> String[9];</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>float[][] nums = <b>new</b> float[48][];</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>float[] means = <b>new</b> float[9], stdvs = <b>new</b> float[9];</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>if</b> (scanner.hasNext())</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>for</b> (int i = 0; i &lt; 9; i++) headings[i] = scanner.next();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>while</b> (scanner.hasNext())</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>if</b> (col == 0) nums[++row] = <b>new</b> float[9];</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>if</b> (col == 1) nums[row][col] = grades.indexOf(scanner.next());</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>else</b> nums[row][col] = scanner.nextFloat();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>if</b> (++col == 9) col = 0;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>scanner.close();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>n = row + 1;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>for</b> (int i = 0; i &lt; 9; i++)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>sum = 0;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>for</b> (int j = 0; j &lt; n; j++) sum += nums[j][i];</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>means[i] = sum / n;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>for</b> (int i = 0; i &lt; 9; i++)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>sum = 0;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>for</b> (int j = 0; j &lt; n; j++) sum += Math.pow(nums[j][i] - means[i], 2);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>stdvs[i] = (float) Math.sqrt(sum / n);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>for</b> (int i = 0; i &lt; 9; i++)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>System.out.printf(<font color=red>"Mean&nbsp;of&nbsp;%-7s:&nbsp;%.2f\n"</font>, headings[i], means[i]);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>System.out.printf(<font color=red>"Stdv&nbsp;of&nbsp;%-6s:&nbsp;%.2f\n"</font>, headings[i], stdvs[i]);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
<nobr>}</nobr><br>
</p></td></tr></table>
<table align=left><tr><td  align=right style=color:teal valign=top><p>1<br>
2<br>
3<br>
4<br>
5<br>
6<br>
7<br>
8<br>
9<br>
10<br>
11<br>
12<br>
13<br>
14<br>
15<br>
16<br>
17<br>
18<br>
19<br>
20<br>
21<br>
22<br>
23<br>
24<br>
25<br>
26<br>
27<br>
28<br>
29<br>
30<br>
31<br>
32<br>
33<br>
34<br>
35<br>
36<br>
37<br>
38<br>
39<br>
40<br>
41<br>
42<br>
43<br>
44<br>
45<br>
46<br>
47<br>
48<br>
49<br>
50<br>
51<br>
52<br>
53<br>
54<br>
55<br>
56<br>
57<br>
</p></td><td  align=left valign=top><p><nobr><b>private</b> <b>void</b> save()</nobr><br>
<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>try</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>FileWriter f = <b>new</b> FileWriter(<font color=red>"gogame.txt"</font>,false);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>for</b> (int r = 0; r &lt; N; r++)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>for</b> (int c = 0; c &lt; N; c++)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>f.append((colors[r][c] == Color.BLACK?<font color=red>"0"</font>:(colors[r][c] == Color.WHITE?<font color=red>"1"</font>:<font color=red>"2"</font>)));</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>f.write(<font color=red>"\n"</font>);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>if</b> (mycolor==Color.BLACK)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>f.append( state==State.init?<font color=red>"2"</font>:(state==State.thinking?<font color=red>"0"</font>:<font color=red>"1"</font>));</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>else</b></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>f.append( state==State.init?<font color=red>"2"</font>:(state==State.thinking?<font color=red>"1"</font>:<font color=red>"0"</font>));</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>f.close();</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>catch(Exception e)</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
<nobr>}</nobr><br>
<nobr><b>private</b> <b>void</b> open()</nobr><br>
<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>try</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>Scanner s = <b>new</b> Scanner(new File(<font color=red>"gogame.txt"</font>));</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>for</b> (int r = 0; r &lt; N; r++)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>String t = s.next();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>for</b> (int c = 0; c &lt; N; c++)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>char</b> x = t.charAt(c);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>Color color = x == <font color=#FF00CC>'1'</font>?Color.WHITE:(x==<font color=#FF00CC>'0'</font>?Color.BLACK:null);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>if</b> (color!=null)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>drawStone(r, c, color);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>board.repaint();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>int</b> i = s.nextInt();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>String m = JOptionPane.showInputDialog(<font color=red>"What&nbsp;is&nbsp;your&nbsp;previous&nbsp;color?"</font>);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>if</b> (m.equals(<font color=red>"black"</font>)) mycolor = Color.BLACK;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>else</b></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>mycolor = Color.WHITE;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>if</b> (i == 1 && mycolor == Color.WHITE || i == 0 && mycolor == Color.BLACK)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>JOptionPane.showMessageDialog(this, <font color=red>"You&nbsp;got&nbsp;first"</font>);</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>catch(Exception e)</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
<nobr>}</nobr><br>
</p></td></tr></table>
<table align=left><tr><td  align=right style=color:teal valign=top><p>1<br>
2<br>
3<br>
4<br>
5<br>
6<br>
7<br>
8<br>
9<br>
10<br>
11<br>
12<br>
13<br>
14<br>
15<br>
16<br>
17<br>
18<br>
19<br>
20<br>
21<br>
22<br>
23<br>
24<br>
25<br>
26<br>
27<br>
28<br>
29<br>
30<br>
31<br>
32<br>
33<br>
34<br>
35<br>
36<br>
37<br>
38<br>
39<br>
40<br>
41<br>
42<br>
43<br>
44<br>
45<br>
46<br>
47<br>
48<br>
49<br>
50<br>
51<br>
52<br>
53<br>
54<br>
55<br>
56<br>
57<br>
58<br>
59<br>
60<br>
61<br>
62<br>
63<br>
64<br>
65<br>
66<br>
67<br>
68<br>
69<br>
70<br>
71<br>
72<br>
73<br>
74<br>
75<br>
76<br>
77<br>
78<br>
79<br>
80<br>
81<br>
82<br>
83<br>
84<br>
85<br>
86<br>
</p></td><td  align=left valign=top><p><nobr><b>package</b> csci121;</nobr><br>
<nobr><b>import</b> java.awt.Color;</nobr><br>
<nobr><b>import</b> java.awt.Container;</nobr><br>
<nobr><b>import</b> java.awt.Dimension;</nobr><br>
<nobr><b>import</b> java.awt.Graphics;</nobr><br>
<nobr><b>import</b> java.awt.GridBagConstraints;</nobr><br>
<nobr><b>import</b> javax.swing.*;</nobr><br>
<nobr><b>public</b> <b>class</b> GoGame <b>extends</b> javax.swing.JFrame</nobr><br>
<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>JLabel lblmyip = <b>new</b> JLabel(<font color=red>"My&nbsp;IP"</font>);</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>JLabel lblpip = <b>new</b> JLabel(<font color=red>"Partner&nbsp;IP"</font>);</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>JLabel lblmycolor = <b>new</b> JLabel(<font color=red>"My&nbsp;Color"</font>);</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>JTextField txtmyip = <b>new</b> JTextField(<font color=red>"192.168.111.222"</font>);</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>JTextField txtpip = <b>new</b> JTextField(<font color=red>"192.168.111.222"</font>);</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>JButton btns = <b>new</b> JButton(<font color=red>"Start"</font>);</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>int</b> width = 600;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>int</b> cellSize;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>final</b> <b>int</b> N = 19;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>Color bgcolor = Color.ORANGE;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>Color [][] colors = <b>new</b> Color[N][];</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>JPanel board = <b>new</b> JPanel()</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>void</b> paintGrid(Graphics g)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>cellSize = width/N;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>width = cellSize*N;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>g.setColor(bgcolor);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>for</b> (int row = 0; row &lt; N; row++)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>g.drawLine(0,row*cellSize,width,row*cellSize);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>public</b> <b>void</b> paintComponent(Graphics g)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>paintGrid(g);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>paintStones(g);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>};</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>void</b> place(JComponent c, <b>int</b> x, <b>int</b> y)</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>GridBagConstraints c = <b>new</b> GridBagConstraints();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>g.gridx = x;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>g.gridy = y;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>if</b> (y==1)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>g.gridwidth = 6;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>else</b> g.gridwidth = 1;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>if</b> (x%2==0)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>g.anchor = GridBagConstraints.EAST;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>else</b></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>g.anchor = GridBagConstraints.WEST;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>if</b> (y == 1)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>g.fill = GridBagConstraints.BOTH;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>contentPane.add(c,g);</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>Container contentPane = getContentPane();</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>void</b> initComponents()</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>place(lblmyip,0,0);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>place(txtmyip,1,0);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>place(lblpip,2,0);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>place(txtpip,3,0);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>place(lblmycolor,4,0);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>place(btns,5,0);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>place(board,0,1);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>board.setVisible(true);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>setPreferredSize(new Dimension(width+4*cellSize, width+4*cellSize));</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>pack();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>public</b> GoGame()</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>initComponents();</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>public</b> <b>static</b> <b>void</b> main(String [] args)</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>GoGame g = <b>new</b> GoGame();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>g.setVisible(true);</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
<nobr>}</nobr><br>
</p></td></tr></table>
<table align=left><tr><td  align=right style=color:teal valign=top><p>1<br>
2<br>
3<br>
4<br>
5<br>
6<br>
7<br>
8<br>
9<br>
10<br>
11<br>
12<br>
13<br>
14<br>
15<br>
16<br>
17<br>
18<br>
19<br>
20<br>
21<br>
22<br>
23<br>
24<br>
25<br>
26<br>
27<br>
28<br>
29<br>
30<br>
31<br>
32<br>
33<br>
34<br>
35<br>
36<br>
37<br>
38<br>
39<br>
40<br>
41<br>
42<br>
43<br>
45<br>
46<br>
47<br>
48<br>
49<br>
50<br>
51<br>
52<br>
53<br>
54<br>
55<br>
56<br>
57<br>
58<br>
59<br>
60<br>
61<br>
62<br>
63<br>
64<br>
65<br>
66<br>
67<br>
68<br>
69<br>
70<br>
71<br>
72<br>
73<br>
74<br>
75<br>
76<br>
77<br>
78<br>
79<br>
80<br>
81<br>
82<br>
83<br>
84<br>
85<br>
86<br>
87<br>
88<br>
89<br>
90<br>
91<br>
92<br>
93<br>
94<br>
95<br>
96<br>
97<br>
98<br>
99<br>
100<br>
101<br>
102<br>
103<br>
104<br>
105<br>
106<br>
107<br>
108<br>
109<br>
110<br>
111<br>
112<br>
113<br>
114<br>
115<br>
116<br>
117<br>
118<br>
119<br>
120<br>
121<br>
122<br>
123<br>
124<br>
125<br>
126<br>
127<br>
128<br>
129<br>
130<br>
131<br>
132<br>
133<br>
134<br>
135<br>
136<br>
137<br>
138<br>
139<br>
140<br>
141<br>
142<br>
143<br>
144<br>
145<br>
146<br>
147<br>
148<br>
149<br>
150<br>
151<br>
152<br>
153<br>
154<br>
155<br>
156<br>
157<br>
158<br>
159<br>
160<br>
161<br>
162<br>
163<br>
164<br>
167<br>
168<br>
169<br>
170<br>
171<br>
172<br>
173<br>
174<br>
175<br>
176<br>
177<br>
178<br>
</p></td><td  align=left valign=top><p><nobr><b>import</b> javax.swing.JFrame;</nobr><br>
<nobr><b>import</b> java.awt.*;</nobr><br>
<nobr><b>import</b> java.io.*;</nobr><br>
<nobr><b>import</b> java.net.*;</nobr><br>
<nobr><b>import</b> javax.swing.*;</nobr><br>
<nobr></nobr><br>
<nobr><b>public</b> <b>class</b> GoGame <b>extends</b> JFrame</nobr><br>
<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>final</b> <b>int</b> N = 19;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>int</b> cellSize;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>private</b> JLabel lblmyip = <b>new</b> JLabel(<font color=red>"My&nbsp;IP"</font>);</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>private</b> JLabel lblpip = <b>new</b> JLabel(<font color=red>"Partner&nbsp;IP"</font>);</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>private</b> JTextField txtmyip = <b>new</b> JTextField(<font color=red>"10.28.227.137"</font>);</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>private</b> JTextField txtpip = <b>new</b>  JTextField(<font color=red>"10.28.3.49"</font>);</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>private</b> JButton btnStart= <b>new</b> JButton(<font color=red>"Listen"</font>);</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>private</b> JLabel lblmycolor = <b>new</b> JLabel(<font color=red>"Black"</font>);</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>Container contentpane = getContentPane();</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>Color [][] colors = <b>new</b> Color[N][];</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>JPanel board = <b>new</b> JPanel()</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>@Override</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>protected</b> <b>void</b> paintComponent(Graphics g)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>super.paintComponent(g);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>paintGrid(width, g);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>for</b> (int row=0; row &lt; N; row++)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>for</b> (int col=0;col&lt; N; col++)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>g.setColor(colors[row][col]);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>if</b> (colors[row][col] != Color.ORANGE)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>g.fillOval((int)((0.65+col)*cellSize),(int)((0.63+row)*cellSize), 3*cellSize/4,  3*cellSize/4 );</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>};</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>int</b> width = 500;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>public</b> GoGame()</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>initComponents();</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>public</b>  <b>void</b> paintGrid(int w, Graphics g)</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>cellSize = width/N;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>width  = N * cellSize;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>g.setColor(java.awt.Color.BLACK);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>for</b> (int row = 1; row &lt;= N; row++)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>g.drawLine(cellSize, row * cellSize, width,  row * cellSize);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>for</b> (int col = 1; col &lt;= N; col++)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>g.drawLine(col * cellSize, cellSize, col * cellSize, width);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>private</b> <b>void</b> place(JComponent e, <b>int</b> x, <b>int</b> y)</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>GridBagConstraints c = <b>new</b> GridBagConstraints();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>c.gridx = x;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>c.gridy = y;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>c.gridwidth = (y == 0?1:6);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>c.weightx = 1.0;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>c.weighty = (y==0?0.0:1.0);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>if</b> (y == 1 || x%2==1) c.fill = GridBagConstraints.BOTH;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>c.anchor =  x%2==0? GridBagConstraints.EAST: GridBagConstraints.WEST;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>c.insets = <b>new</b> java.awt.Insets(3, 3, 0, 0);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>contentpane.add(e, c);</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>@SuppressWarnings(<font color=red>"unchecked"</font>)</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>private</b> <b>void</b> initComponents()</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>for</b> (int i=0; i &lt; N; i++)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>colors[i] = <b>new</b> Color[N];</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>for</b> (int j=0; j &lt; N; j++)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>colors[i][j] = Color.ORANGE;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>java.awt.GridBagConstraints c;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>Container contentpane = getContentPane();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>contentpane.setLayout(new java.awt.GridBagLayout());</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>place(lblmyip,0,0);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>place(txtmyip,1,0);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>place(lblpip,2,0);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>place(txtpip,3,0);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>place(lblmycolor,4,0);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>place(btnStart,5,0);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>board.setSize(width+2*cellSize, width+2*cellSize);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>board.setVisible(true);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>place(board,0,1);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>setSize((int)(width*1.09), (int)(width*1.18));</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>setMinimumSize(new java.awt.Dimension((int)(width*1.08), (int)(width*1.18)));</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>pack();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>board.setBackground(Color.ORANGE);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>board.addMouseListener(new java.awt.event.MouseAdapter()</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>public</b> <b>void</b> mouseClicked(java.awt.event.MouseEvent evt)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>if</b> (state == State.listening)return;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>int</b> x0 = board.getX();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>int</b> y0 = board.getY();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>int</b> x = (evt.getX() - x0)/cellSize;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>int</b> y = (evt.getY() - y0 +cellSize)/cellSize;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>if</b> (y &lt; 0) y = 0; <b>if</b> (y&gt;=N) y = N - 1;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>if</b> (x &lt; 0) x = 0; <b>if</b> (x&gt;=N) x = N - 1;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>drawStone(y,x,mycolor);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>comm.sendnum(x, y, txtpip.getText());</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>state = State.listening;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>comm.receive(true);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>btnStart.addActionListener(new java.awt.event.ActionListener()</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>public</b> <b>void</b> actionPerformed(java.awt.event.ActionEvent evt)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>if</b> (state == State.init)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>comm.receive(true);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>mycolor = Color.WHITE;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>else</b> <b>if</b> (state == State.listening)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>quit();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>else</b></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>comm.sendnum(-1, 0, txtpip.getText());</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>);</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>void</b> drawStone(int x, <b>int</b> y, Color cl)</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>colors[x][y] = cl;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>board.repaint();</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>Color mycolor = Color.BLACK;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>Dialogs comm = <b>new</b> Dialogs()</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>public</b> <b>void</b> handlenum(int r, <b>int</b> c)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>if</b> (r==-1)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>state = State.init; return;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>drawStone(r,c,mycolor==Color.WHITE?Color.BLACK:Color.WHITE);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>state = State.thinking;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>};</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>enum State</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>init, listening, thinking</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>};</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>State state = State.init;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>void</b> quit()</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>comm.sendnum(-1, 0, <font color=red>"10.28.227.137"</font>);</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>public</b> <b>static</b> <b>void</b> main(String args[])</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>java.awt.EventQueue.invokeLater(new Runnable()</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>public</b> <b>void</b> run()</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>new</b> GoGame().setVisible(true);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>);</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
<nobr>}</nobr><br>
</p></td></tr></table>
<table align=left><tr><td  align=right style=color:teal valign=top><p>1<br>
2<br>
3<br>
4<br>
5<br>
6<br>
7<br>
8<br>
9<br>
10<br>
11<br>
12<br>
13<br>
14<br>
15<br>
16<br>
17<br>
18<br>
</p></td><td  align=left valign=top><p><nobr><b>import</b> java.io.*;</nobr><br>
<nobr><b>public</b> <b>class</b> Main</nobr><br>
<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>public</b> <b>static</b> <b>void</b> main(String[] args)</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>try</b></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>FileReader r = <b>new</b> FileReader(<font color=red>"Main.java"</font>);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>int</b> x = r.read();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>while</b> (x &lt; 100) x = r.read();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>System.out.println(x);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>catch(Exception e)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>System.out.println(e);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
<nobr>}</nobr><br>
</p></td></tr></table>
<table align=left><tr><td  align=right style=color:teal valign=top><p>1<br>
2<br>
3<br>
4<br>
5<br>
6<br>
7<br>
8<br>
9<br>
10<br>
11<br>
12<br>
13<br>
14<br>
15<br>
16<br>
17<br>
18<br>
19<br>
20<br>
21<br>
22<br>
23<br>
24<br>
25<br>
26<br>
27<br>
28<br>
29<br>
30<br>
31<br>
32<br>
33<br>
</p></td><td  align=left valign=top><p><nobr><b>void</b> save()</nobr><br>
<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>try</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>ObjectOutputStream d = <b>new</b> ObjectOutputStream(new FileOutputStream(<font color=red>"gogmae.txt"</font>));</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>d.writeObject(colors);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>d.writeObject(mycolor);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>d.writeObject(state);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>d.close();</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>catch(Exception e)</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>System.out.println(e);</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
<nobr>}</nobr><br>
<nobr></nobr><br>
<nobr><b>void</b> open()</nobr><br>
<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>try</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>ObjectInputStream d = <b>new</b> ObjectInputStream(new FileInputStream(<font color=red>"gogmae.txt"</font>));</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>colors = (Color[][]) d.readObject();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>mycolor = (Color) d.readObject();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>state = (State) d.readObject();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>d.close();</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>catch(Exception e)</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>System.out.println(e);</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>if</b> (state == State.listening)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>JOptionPane,showMessageDialog(<font color=red>"To&nbsp;resume&nbsp;the&nbsp;game,&nbsp;click&nbsp;Listen&nbsp;button"</font>);</nobr><br>
<nobr>}</nobr><br>
</p></td></tr></table>
<table align=left><tr><td  align=right style=color:teal valign=top><p>1<br>
2<br>
3<br>
4<br>
5<br>
6<br>
7<br>
8<br>
9<br>
10<br>
11<br>
12<br>
13<br>
14<br>
15<br>
16<br>
17<br>
18<br>
19<br>
20<br>
21<br>
22<br>
23<br>
24<br>
25<br>
26<br>
27<br>
28<br>
29<br>
30<br>
31<br>
32<br>
33<br>
34<br>
35<br>
36<br>
37<br>
38<br>
39<br>
40<br>
41<br>
42<br>
43<br>
44<br>
45<br>
46<br>
47<br>
48<br>
49<br>
50<br>
51<br>
52<br>
53<br>
54<br>
55<br>
56<br>
57<br>
58<br>
59<br>
60<br>
61<br>
62<br>
63<br>
64<br>
65<br>
66<br>
67<br>
68<br>
69<br>
70<br>
71<br>
72<br>
73<br>
74<br>
75<br>
76<br>
77<br>
78<br>
79<br>
80<br>
81<br>
82<br>
83<br>
84<br>
85<br>
86<br>
87<br>
88<br>
89<br>
90<br>
91<br>
92<br>
93<br>
94<br>
95<br>
96<br>
97<br>
98<br>
99<br>
100<br>
101<br>
102<br>
103<br>
104<br>
105<br>
106<br>
107<br>
108<br>
109<br>
110<br>
111<br>
112<br>
113<br>
114<br>
115<br>
116<br>
117<br>
118<br>
119<br>
120<br>
121<br>
122<br>
123<br>
124<br>
125<br>
126<br>
127<br>
128<br>
129<br>
130<br>
131<br>
132<br>
133<br>
134<br>
135<br>
136<br>
137<br>
138<br>
139<br>
140<br>
</p></td><td  align=left valign=top><p><nobr><b>import</b> javax.swing.*;</nobr><br>
<nobr><b>import</b> java.awt.*;</nobr><br>
<nobr><b>import</b> java.awt.event.ActionEvent;</nobr><br>
<nobr><b>import</b> java.awt.event.ActionListener;</nobr><br>
<nobr></nobr><br>
<nobr><b>public</b> <b>class</b> Factoring <b>extends</b> JFrame</nobr><br>
<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>private</b> <b>final</b> JTextArea jTextArea1 = <b>new</b> JTextArea(20, 5);</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>private</b> <b>final</b> JButton jButton1 = <b>new</b> JButton(<font color=red>"Start"</font>);</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>private</b> <b>final</b> JTextField jTextField1 = <b>new</b> JTextField(Long.toString(Long.MAX_VALUE));</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>private</b> <b>volatile</b> <b>boolean</b> done = false;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>public</b> Factoring()</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><font color=green>//&nbsp;设置关闭操作</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></font>setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><font color=green>//&nbsp;初始化组件</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></font>initUI();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><font color=green>//&nbsp;设置窗口大小和可见性</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></font>pack();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>setLocationRelativeTo(null);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>setVisible(true);</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>private</b> <b>void</b> initUI()</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><font color=green>//&nbsp;设置文本区可滚动</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></font>JScrollPane jScrollPane1 = <b>new</b> JScrollPane(jTextArea1);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><font color=green>//&nbsp;按钮点击事件监听器</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></font>jButton1.addActionListener(new ActionListener()</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>@Override</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>public</b> <b>void</b> actionPerformed(ActionEvent evt)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>if</b> (jButton1.getText().equals(<font color=red>"Start"</font>))</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>startFactoring();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>else</b></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>stopFactoring();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><font color=green>//&nbsp;布局管理器设置</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></font>GroupLayout layout = <b>new</b> GroupLayout(getContentPane());</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>getContentPane().setLayout(layout);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>layout.setHorizontalGroup(</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>layout.createParallelGroup(GroupLayout.Alignment.LEADING)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>.addGroup(layout.createSequentialGroup()</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>.addContainerGap()</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>.addComponent(jScrollPane1, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>.addContainerGap())</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>.addGroup(layout.createSequentialGroup()</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>.addGap(65, 65, 65)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>.addComponent(jTextField1, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>.addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>.addComponent(jButton1)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>.addGap(65, 65, 65))</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>layout.setVerticalGroup(</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>layout.createParallelGroup(GroupLayout.Alignment.LEADING)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>.addGroup(layout.createSequentialGroup()</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>.addGap(19, 19, 19)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>.addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>.addComponent(jTextField1, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>.addComponent(jButton1))</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>.addGap(18, 18, 18)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>.addComponent(jScrollPane1, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>.addContainerGap())</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>);</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>private</b> <b>void</b> startFactoring()</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>done = false;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>jButton1.setText(<font color=red>"Quit"</font>);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>new</b> Thread(() -&gt; task()).start();</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>private</b> <b>void</b> stopFactoring()</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>done = true;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>jButton1.setText(<font color=red>"Start"</font>);</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>private</b> <b>void</b> task()</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>try</b></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>long</b> n = Long.parseLong(jTextField1.getText());</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>for</b> (int i = 2; !done && i &lt;= Math.sqrt(n) + 1; i++)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>if</b> (n % i == 0)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>synchronized</b> (this)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>if</b> (done) break;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>jTextArea1.append(i + <font color=red>"&nbsp;"</font>);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>n /= i;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>if</b> (!done && n &gt; 1)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>synchronized</b> (this)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>jTextArea1.append(n + <font color=red>"&nbsp;"</font>);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>catch</b> (NumberFormatException e)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>JOptionPane.showMessageDialog(this, <font color=red>"Invalid&nbsp;number&nbsp;format"</font>, <font color=red>"Error"</font>, JOptionPane.ERROR_MESSAGE);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>public</b> <b>static</b> <b>void</b> main(String[] args)</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><font color=green>//&nbsp;尝试使用Nimbus外观风格</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></font><b>try</b></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>UIManager.setLookAndFeel(<font color=red>"javax.swing.plaf.nimbus.NimbusLookAndFeel"</font>);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>catch</b> (Exception e)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>e.printStackTrace();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><font color=green>//&nbsp;在事件调度线程上创建并显示GUI</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></font>SwingUtilities.invokeLater(Factoring::new);</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
<nobr>}</nobr><br>
</p></td></tr></table>
<table align=left><tr><td  align=right style=color:teal valign=top><p>1<br>
2<br>
3<br>
4<br>
5<br>
6<br>
8<br>
9<br>
10<br>
11<br>
12<br>
13<br>
14<br>
15<br>
16<br>
17<br>
18<br>
19<br>
20<br>
21<br>
22<br>
23<br>
24<br>
25<br>
26<br>
27<br>
28<br>
29<br>
30<br>
31<br>
32<br>
33<br>
34<br>
35<br>
36<br>
37<br>
38<br>
39<br>
40<br>
41<br>
42<br>
43<br>
44<br>
45<br>
46<br>
47<br>
48<br>
49<br>
50<br>
51<br>
52<br>
53<br>
54<br>
55<br>
56<br>
57<br>
58<br>
59<br>
60<br>
61<br>
62<br>
63<br>
64<br>
65<br>
66<br>
67<br>
68<br>
69<br>
70<br>
71<br>
72<br>
73<br>
74<br>
75<br>
76<br>
77<br>
78<br>
</p></td><td  align=left valign=top><p><nobr><b>import</b> java.io.File;</nobr><br>
<nobr><b>import</b> java.io.FileWriter;</nobr><br>
<nobr><b>import</b> java.io.IOException;</nobr><br>
<nobr><b>import</b> java.util.Scanner;</nobr><br>
<nobr><b>import</b> java.util.concurrent.atomic.AtomicBoolean;</nobr><br>
<nobr></nobr><br>
<nobr><b>public</b> <b>class</b> FileSaving</nobr><br>
<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>static</b> AtomicBoolean b = <b>new</b> AtomicBoolean(false);</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>static</b> <b>class</b> FileThread <b>extends</b> Thread</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>String path;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>FileThread(String p)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>path = p;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>@Override</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>public</b> <b>void</b> run()</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>FileWriter f = null;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>String n = Thread.currentThread().getName();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>synchronized</b> (b)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>try</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>f = <b>new</b> FileWriter(path,true);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>f.write(n + <font color=red>"\n"</font>);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>catch(IOException e)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>System.out.println(e.toString());</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>finally</b></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>if</b> (f != null) try</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>f.close();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>catch(IOException e1)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>System.out.println(e1.toString());</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>public</b> <b>static</b> <b>void</b> main(String [] args)</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>Thread [] ts = <b>new</b> Thread[10];</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>for</b> (int i=0; i &lt; 10; i++)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>ts[i] = <b>new</b> FileThread(<font color=red>"sharedfile.txt"</font>);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>ts[i].setName(<font color=red>"t"</font>+ i);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>ts[i].start();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>for</b> (int i=0; i &lt; 10; i++)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>try</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>ts[i].join();<font color=green>//main&nbsp;thread&nbsp;waits&nbsp;for&nbsp;ts[i]</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></font></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>catch(Exception e)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>try</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>Scanner s = <b>new</b> Scanner(new File(<font color=red>"sharedfile.txt"</font>));</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>System.out.println(<font color=red>"File&nbsp;content:"</font>+ s.useDelimiter(<font color=red>"\\Z"</font>).next());</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>catch(Exception e)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
<nobr>}</nobr><br>
</p></td></tr></table>
<table align=left><tr><td  align=right style=color:teal valign=top><p>1<br>
2<br>
3<br>
4<br>
5<br>
6<br>
7<br>
8<br>
9<br>
10<br>
11<br>
12<br>
13<br>
14<br>
15<br>
16<br>
17<br>
18<br>
19<br>
20<br>
21<br>
22<br>
23<br>
24<br>
25<br>
26<br>
27<br>
28<br>
29<br>
30<br>
31<br>
32<br>
33<br>
34<br>
35<br>
36<br>
37<br>
38<br>
39<br>
40<br>
41<br>
42<br>
43<br>
44<br>
45<br>
46<br>
47<br>
48<br>
49<br>
50<br>
51<br>
52<br>
53<br>
54<br>
55<br>
56<br>
57<br>
58<br>
59<br>
60<br>
61<br>
62<br>
63<br>
64<br>
65<br>
66<br>
67<br>
68<br>
69<br>
70<br>
71<br>
72<br>
73<br>
74<br>
75<br>
76<br>
77<br>
78<br>
79<br>
80<br>
81<br>
82<br>
83<br>
84<br>
85<br>
86<br>
87<br>
88<br>
89<br>
90<br>
91<br>
92<br>
93<br>
94<br>
95<br>
96<br>
97<br>
98<br>
99<br>
100<br>
101<br>
102<br>
103<br>
104<br>
105<br>
106<br>
107<br>
</p></td><td  align=left valign=top><p><nobr><b>import</b> javax.swing.*;</nobr><br>
<nobr><b>import</b> java.awt.*;</nobr><br>
<nobr><b>import</b> java.awt.event.ActionEvent;</nobr><br>
<nobr><b>import</b> java.awt.event.ActionListener;</nobr><br>
<nobr><b>import</b> java.io.IOException;</nobr><br>
<nobr><b>import</b> java.net.*;</nobr><br>
<nobr><b>public</b> <b>class</b> UDPChatApp <b>extends</b> JFrame</nobr><br>
<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>private</b> JTextArea sendTextArea;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>private</b> JTextArea receiveTextArea;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>private</b> DatagramSocket socket;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>private</b> InetAddress receiverAddress;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>private</b> <b>int</b> port = 2311;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>public</b> UDPChatApp()</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>setTitle(<font color=red>"UDP&nbsp;Chat&nbsp;Application"</font>);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>setSize(600, 400);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>setLayout(new BorderLayout());</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>sendTextArea = <b>new</b> JTextArea(5, 20);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>receiveTextArea = <b>new</b> JTextArea(15, 20);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>receiveTextArea.setEditable(false);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>JButton sendButton = <b>new</b> JButton(<font color=red>"Send"</font>);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>sendButton.addActionListener(new ActionListener()</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>@Override</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>public</b> <b>void</b> actionPerformed(ActionEvent e)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>sendMessage();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>JPanel inputPanel = <b>new</b> JPanel();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>inputPanel.setLayout(new BorderLayout());</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>inputPanel.add(new JScrollPane(sendTextArea), BorderLayout.CENTER);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>inputPanel.add(sendButton, BorderLayout.EAST);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>add(new JScrollPane(receiveTextArea), BorderLayout.CENTER);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>add(inputPanel, BorderLayout.SOUTH);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>setVisible(true);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>try</b></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>socket = <b>new</b> DatagramSocket(port);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>startListening();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>catch</b> (SocketException e)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>e.printStackTrace();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>private</b> <b>void</b> sendMessage()</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>String message = sendTextArea.getText();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>if</b> (!message.isEmpty())</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>try</b></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>byte[] sendBuffer = message.getBytes();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>DatagramPacket sendPacket = <b>new</b> DatagramPacket(sendBuffer, sendBuffer.length, receiverAddress, port);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>socket.send(sendPacket);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>sendTextArea.setText(<font color=red>""</font>);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>catch</b> (IOException e)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>e.printStackTrace();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>private</b> <b>void</b> startListening()</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>Thread receiveThread = <b>new</b> Thread(() -&gt;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>while</b> (true)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>try</b></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>byte[] receiveBuffer = <b>new</b> byte[1024];</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>DatagramPacket receivePacket = <b>new</b> DatagramPacket(receiveBuffer, receiveBuffer.length);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>socket.receive(receivePacket);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>String receivedMessage = <b>new</b> String(receivePacket.getData(), 0, receivePacket.getLength());</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>receiveTextArea.append(receivedMessage + <font color=red>"\n"</font>);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>catch</b> (IOException e)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>e.printStackTrace();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>receiveThread.start();</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>public</b> <b>static</b> <b>void</b> main(String[] args)</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>SwingUtilities.invokeLater(() -&gt;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>UDPChatApp app = <b>new</b> UDPChatApp();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>try</b></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>app.receiverAddress = InetAddress.getByName(JOptionPane.showInputDialog(<font color=red>"Enter&nbsp;receiver's&nbsp;IP&nbsp;address"</font>));</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>catch</b> (UnknownHostException e)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>e.printStackTrace();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>);</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
<nobr>}</nobr><br>
</p></td></tr></table>
<table align=left><tr><td  align=right style=color:teal valign=top><p>1<br>
2<br>
3<br>
4<br>
5<br>
6<br>
7<br>
8<br>
9<br>
10<br>
11<br>
12<br>
13<br>
14<br>
15<br>
16<br>
17<br>
18<br>
19<br>
20<br>
21<br>
22<br>
23<br>
24<br>
25<br>
26<br>
27<br>
28<br>
29<br>
30<br>
31<br>
32<br>
33<br>
34<br>
35<br>
36<br>
37<br>
38<br>
39<br>
40<br>
41<br>
42<br>
43<br>
44<br>
45<br>
46<br>
47<br>
48<br>
49<br>
50<br>
51<br>
52<br>
53<br>
54<br>
55<br>
56<br>
57<br>
58<br>
59<br>
60<br>
61<br>
62<br>
63<br>
64<br>
65<br>
66<br>
67<br>
68<br>
69<br>
70<br>
71<br>
72<br>
73<br>
74<br>
75<br>
76<br>
</p></td><td  align=left valign=top><p><nobr><b>import</b> java.io.*;</nobr><br>
<nobr><b>import</b> java.net.*;</nobr><br>
<nobr><b>import</b> java.util.*;</nobr><br>
<nobr></nobr><br>
<nobr><b>public</b> <b>class</b> SimpleHTTPServer</nobr><br>
<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>private</b> ServerSocket serverSocket;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>private</b> <b>final</b> <b>int</b> port;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>public</b> SimpleHTTPServer(int port)</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>this.port = port;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>public</b> <b>void</b> start()</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>try</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>serverSocket = <b>new</b> ServerSocket(port);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>System.out.println(<font color=red>"Server&nbsp;started&nbsp;on&nbsp;port&nbsp;"</font>+ port);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>while</b> (true)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>Socket clientSocket = serverSocket.accept();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>Thread thread =new Thread(() -&gt;handleClient(clientSocket));</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>thread.start();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>catch (IOException e)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>e.printStackTrace();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>private</b> <b>void</b> handleClient(Socket clientSocket)</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>try</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>BufferedReader in =new BufferedReader(new</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>InputStreamReader(clientSocket.getInputStream()));</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>DataOutputStream out = <b>new</b> DataOutputStream(clientSocket.getOutputStream());</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><font color=green>//&nbsp;Read&nbsp;the&nbsp;request&nbsp;headers</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></font>Map headers = readHeaders(in);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>System.out.println(headers);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><font color=green>//&nbsp;Check&nbsp;if&nbsp;it's&nbsp;a&nbsp;multipart/form-data&nbsp;request</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></font><font color=green>//Send&nbsp;resDonse</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></font>String response=<font color=red>"HTTP/1.1&nbsp;200&nbsp;0K\r\n"</font></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>+<font color=red>"Content-Type:&nbsp;text/plain\r\n"</font></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>+<font color=red>"\r\n"</font></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>+<font color=red>"request&nbsp;received"</font>;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>out.writeBytes(response);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>in.close();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>out.close();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>clientSocket.close();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>catch (IOException e)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>e.printStackTrace();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>private</b> Map readHeaders(BufferedReader in)throws IOException</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>Map headers = <b>new</b> HashMap&lt;&gt;();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>String line;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>while(!(line = in.readLine()).isEmpty())</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>String[] parts = line.split(<font color=red>":"</font>, 2);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>if(parts.length ==2)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>headers.put(parts[0].trim(), parts[1].trim());</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>return</b> headers;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>public</b> <b>static</b> <b>void</b> main(String[] args)</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>SimpleHTTPServer server = <b>new</b> SimpleHTTPServer(8080);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>server.start();</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
<nobr>}</nobr><br>
</p></td></tr></table>
<table align=left><tr><td  align=right style=color:teal valign=top><p>1<br>
2<br>
3<br>
4<br>
5<br>
6<br>
7<br>
8<br>
9<br>
10<br>
13<br>
14<br>
15<br>
16<br>
17<br>
18<br>
19<br>
20<br>
21<br>
22<br>
23<br>
24<br>
25<br>
26<br>
27<br>
28<br>
29<br>
30<br>
31<br>
32<br>
33<br>
34<br>
35<br>
36<br>
37<br>
38<br>
39<br>
40<br>
41<br>
42<br>
43<br>
44<br>
45<br>
46<br>
47<br>
48<br>
49<br>
50<br>
51<br>
52<br>
53<br>
54<br>
55<br>
56<br>
57<br>
58<br>
59<br>
60<br>
61<br>
62<br>
63<br>
64<br>
65<br>
66<br>
67<br>
68<br>
69<br>
70<br>
71<br>
72<br>
73<br>
74<br>
75<br>
76<br>
77<br>
78<br>
79<br>
80<br>
81<br>
82<br>
83<br>
84<br>
85<br>
86<br>
87<br>
88<br>
89<br>
90<br>
91<br>
92<br>
93<br>
94<br>
95<br>
96<br>
97<br>
98<br>
99<br>
100<br>
101<br>
102<br>
103<br>
104<br>
105<br>
106<br>
107<br>
108<br>
109<br>
110<br>
111<br>
112<br>
113<br>
114<br>
115<br>
116<br>
117<br>
118<br>
119<br>
120<br>
121<br>
122<br>
123<br>
124<br>
125<br>
126<br>
127<br>
128<br>
129<br>
130<br>
131<br>
132<br>
133<br>
134<br>
135<br>
136<br>
137<br>
138<br>
139<br>
140<br>
141<br>
142<br>
143<br>
144<br>
145<br>
146<br>
147<br>
148<br>
151<br>
152<br>
153<br>
154<br>
155<br>
156<br>
157<br>
158<br>
159<br>
160<br>
161<br>
162<br>
163<br>
164<br>
165<br>
166<br>
167<br>
168<br>
169<br>
170<br>
171<br>
172<br>
173<br>
174<br>
175<br>
176<br>
177<br>
178<br>
179<br>
180<br>
181<br>
182<br>
183<br>
184<br>
185<br>
186<br>
187<br>
188<br>
189<br>
190<br>
191<br>
192<br>
193<br>
194<br>
195<br>
196<br>
197<br>
198<br>
199<br>
200<br>
201<br>
202<br>
203<br>
204<br>
205<br>
206<br>
207<br>
208<br>
209<br>
210<br>
211<br>
212<br>
213<br>
214<br>
215<br>
216<br>
217<br>
218<br>
219<br>
220<br>
221<br>
222<br>
223<br>
224<br>
225<br>
226<br>
227<br>
228<br>
229<br>
230<br>
231<br>
232<br>
233<br>
234<br>
235<br>
236<br>
237<br>
238<br>
239<br>
240<br>
241<br>
242<br>
243<br>
244<br>
245<br>
246<br>
247<br>
248<br>
249<br>
250<br>
251<br>
252<br>
253<br>
254<br>
255<br>
256<br>
257<br>
258<br>
259<br>
260<br>
261<br>
262<br>
263<br>
264<br>
265<br>
266<br>
267<br>
268<br>
269<br>
270<br>
271<br>
272<br>
273<br>
274<br>
</p></td><td  align=left valign=top><p><nobr><b>import</b> java.io.DataInputStream;</nobr><br>
<nobr><b>import</b> java.io.DataOutputStream;</nobr><br>
<nobr><b>import</b> java.io.IOException;</nobr><br>
<nobr><b>import</b> java.net.ServerSocket;</nobr><br>
<nobr><b>import</b> java.net.Socket;</nobr><br>
<nobr><b>import</b> java.util.HashMap;</nobr><br>
<nobr><b>import</b> java.util.Map;</nobr><br>
<nobr><b>import</b> java.util.TreeSet;</nobr><br>
<nobr><b>import</b> javax.swing.JOptionPane;</nobr><br>
<nobr></nobr><br>
<nobr><b>public</b> <b>class</b> GoGameWhite</nobr><br>
<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>static</b> <b>int</b>  port = 2311;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>Map&lt;String,TreeSet&lt;String&gt;&gt; sofar = <b>new</b> HashMap&lt;&gt;();</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>class</b> Worker <b>extends</b> Thread</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>Socket socket;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>public</b> Worker(Socket s)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>socket  = s;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>public</b> <b>void</b> run()</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>try</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>String ip = socket.getInetAddress().getHostAddress();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>System.out.println(ip);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>DataInputStream inputStream = <b>new</b> DataInputStream(socket.getInputStream());</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>int</b> r = inputStream.readInt();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>int</b> c = inputStream.readInt();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>socket.close();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>if</b> (r==-1)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>sofar.remove(ip);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>return;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>TreeSet&lt;String&gt; p = sofar.get(ip);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>if</b> (p == null) p = <b>new</b> TreeSet&lt;String&gt;();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>p.add(r  + <font color=red>"_"</font>+ c );</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>int</b> dist = 1000000;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>int</b> minr=-1,minc=-1,mind=dist;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>for</b> (int  row = 0; row &lt; 19; row++)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>for</b> (int col = 0; col &lt; 19; col++)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>if</b> (p.contains(row + <font color=red>"_"</font>+ col)) continue;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>int</b> d = (col&gt;=c?(col-c):(c-col)) + (row&gt;=r?(row-r):(r-row));</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>if</b> (d &lt; dist)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>minr=row;minc=col;dist=d;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>if</b> (dist == 1000000) return;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>p.add(minr  + <font color=red>"_"</font>+ minc);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>sofar.put(ip, p);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>System.out.println(<font color=red>"r="</font>+ r + <font color=red>",&nbsp;c="</font>+ c + <font color=red>",&nbsp;mr="</font>+ minr +<font color=red>",&nbsp;mc="</font>+ minc);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>sendnum(minr,minc,  ip);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>catch(Exception e)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>public</b> GoGameWhite()</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>void</b> sendnum(int row, <b>int</b> col, String ip)</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>try</b></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>Socket socket = <b>new</b> Socket(ip, port);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>DataOutputStream outputStream = <b>new</b> DataOutputStream(socket.getOutputStream());</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>outputStream.writeInt(row);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>outputStream.writeInt(col);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>outputStream.close();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>socket.close();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><font color=green>//receive(true);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></font></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>catch</b> (IOException ex)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>JOptionPane.showMessageDialog(null, ex.toString());</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>public</b> <b>void</b> sendstr(String msg, String ip)</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>try</b></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>Socket socket = <b>new</b> Socket(ip, port);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>DataOutputStream outputStream = <b>new</b> DataOutputStream(socket.getOutputStream());</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>outputStream.writeUTF(msg);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>outputStream.close();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>socket.close();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><font color=green>//receive(true);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></font></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>catch</b> (IOException ex)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>JOptionPane.showMessageDialog(null, ex.toString());</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>void</b> receive(boolean num)</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>try</b></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>ServerSocket serverSocket = <b>new</b> ServerSocket(port);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>while</b> (true)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>Socket socket = serverSocket.accept();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>new</b> Worker(socket).start();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><font color=green>//serverSocket.close();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></font></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>catch</b> (IOException ex)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>JOptionPane.showMessageDialog(null, ex.toString());</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>public</b> <b>static</b> <b>void</b> main(String [] args)</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>new</b> GoGameWhite().receive(true);</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
<nobr>}</nobr><br>
<nobr></nobr><br>
<nobr>GogameServer:</nobr><br>
<nobr><b>import</b> java.io.DataInputStream;</nobr><br>
<nobr><b>import</b> java.io.DataOutputStream;</nobr><br>
<nobr><b>import</b> java.io.IOException;</nobr><br>
<nobr><b>import</b> java.net.ServerSocket;</nobr><br>
<nobr><b>import</b> java.net.Socket;</nobr><br>
<nobr><b>import</b> java.util.HashMap;</nobr><br>
<nobr><b>import</b> java.util.Map;</nobr><br>
<nobr><b>import</b> java.util.TreeSet;</nobr><br>
<nobr><b>import</b> javax.swing.JOptionPane;</nobr><br>
<nobr></nobr><br>
<nobr><b>public</b> <b>class</b> GoGameWhite</nobr><br>
<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>static</b> <b>int</b>  port = 2311;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>Map&lt;String,TreeSet&lt;String&gt;&gt; sofar = <b>new</b> HashMap&lt;&gt;();</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>class</b> Worker <b>extends</b> Thread</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>Socket socket;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>public</b> Worker(Socket s)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>socket  = s;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>public</b> <b>void</b> run()</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>try</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>String ip = socket.getInetAddress().getHostAddress();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>System.out.println(ip);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>DataInputStream inputStream = <b>new</b> DataInputStream(socket.getInputStream());</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>int</b> r = inputStream.readInt();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>int</b> c = inputStream.readInt();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>socket.close();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>if</b> (r==-1)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>sofar.remove(ip);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>return;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>TreeSet&lt;String&gt; p = sofar.get(ip);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>if</b> (p == null) p = <b>new</b> TreeSet&lt;String&gt;();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>p.add(r  + <font color=red>"_"</font>+ c );</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>int</b> dist = 1000000;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>int</b> minr=-1,minc=-1,mind=dist;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>for</b> (int  row = 0; row &lt; 19; row++)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>for</b> (int col = 0; col &lt; 19; col++)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>if</b> (p.contains(row + <font color=red>"_"</font>+ col)) continue;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>int</b> d = (col&gt;=c?(col-c):(c-col)) + (row&gt;=r?(row-r):(r-row));</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>if</b> (d &lt; dist)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>minr=row;minc=col;dist=d;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>if</b> (dist == 1000000) return;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>p.add(minr  + <font color=red>"_"</font>+ minc);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>sofar.put(ip, p);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>System.out.println(<font color=red>"r="</font>+ r + <font color=red>",&nbsp;c="</font>+ c + <font color=red>",&nbsp;mr="</font>+ minr +<font color=red>",&nbsp;mc="</font>+ minc);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>sendnum(minr,minc,  ip);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>catch(Exception e)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>public</b> GoGameWhite()</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>void</b> sendnum(int row, <b>int</b> col, String ip)</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>try</b></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>Socket socket = <b>new</b> Socket(ip, port);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>DataOutputStream outputStream = <b>new</b> DataOutputStream(socket.getOutputStream());</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>outputStream.writeInt(row);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>outputStream.writeInt(col);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>outputStream.close();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>socket.close();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><font color=green>//receive(true);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></font></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>catch</b> (IOException ex)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>JOptionPane.showMessageDialog(null, ex.toString());</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>public</b> <b>void</b> sendstr(String msg, String ip)</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>try</b></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>Socket socket = <b>new</b> Socket(ip, port);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>DataOutputStream outputStream = <b>new</b> DataOutputStream(socket.getOutputStream());</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>outputStream.writeUTF(msg);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>outputStream.close();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>socket.close();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><font color=green>//receive(true);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></font></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>catch</b> (IOException ex)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>JOptionPane.showMessageDialog(null, ex.toString());</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>void</b> receive(boolean num)</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>try</b></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>ServerSocket serverSocket = <b>new</b> ServerSocket(port);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>while</b> (true)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>Socket socket = serverSocket.accept();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>new</b> Worker(socket).start();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><font color=green>//serverSocket.close();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></font></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>catch</b> (IOException ex)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>JOptionPane.showMessageDialog(null, ex.toString());</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>public</b> <b>static</b> <b>void</b> main(String [] args)</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>new</b> GoGameWhite().receive(true);</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
<nobr>}</nobr><br>
</p></td></tr></table>
</body> </html>